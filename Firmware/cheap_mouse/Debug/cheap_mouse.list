
cheap_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e8c  08006e8c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006e8c  08006e8c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e8c  08006e8c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000088  08006f18  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08006f18  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bcb  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ea  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00032e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c72  00000000  00000000  00034fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2ab  00000000  00000000  0004dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009281b  00000000  00000000  0005aee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de8  00000000  00000000  000ed77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e28 	.word	0x08006e28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08006e28 	.word	0x08006e28

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <init_MPU>:
    return ret;
}


/******************************************End HAL_BUSY************************************************************/
char init_MPU(){
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08d      	sub	sp, #52	; 0x34
 80010c4:	af02      	add	r7, sp, #8
    char status = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80010cc:	23d0      	movs	r3, #208	; 0xd0
 80010ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 80010d2:	2318      	movs	r3, #24
 80010d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


    i2c.instance = &hi2c1;
 80010d8:	4b94      	ldr	r3, [pc, #592]	; (800132c <init_MPU+0x26c>)
 80010da:	4a95      	ldr	r2, [pc, #596]	; (8001330 <init_MPU+0x270>)
 80010dc:	601a      	str	r2, [r3, #0]
    i2c.sdaPort =GPIOB;
 80010de:	4b93      	ldr	r3, [pc, #588]	; (800132c <init_MPU+0x26c>)
 80010e0:	4a94      	ldr	r2, [pc, #592]	; (8001334 <init_MPU+0x274>)
 80010e2:	609a      	str	r2, [r3, #8]
    i2c.sclPort = GPIOB;
 80010e4:	4b91      	ldr	r3, [pc, #580]	; (800132c <init_MPU+0x26c>)
 80010e6:	4a93      	ldr	r2, [pc, #588]	; (8001334 <init_MPU+0x274>)
 80010e8:	611a      	str	r2, [r3, #16]
    i2c.sclPin = GPIO_PIN_8;
 80010ea:	4b90      	ldr	r3, [pc, #576]	; (800132c <init_MPU+0x26c>)
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	819a      	strh	r2, [r3, #12]
    i2c.sdaPin = GPIO_PIN_9;
 80010f2:	4b8e      	ldr	r3, [pc, #568]	; (800132c <init_MPU+0x26c>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	809a      	strh	r2, [r3, #4]


  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80010fa:	e014      	b.n	8001126 <init_MPU+0x66>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 80010fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001100:	b299      	uxth	r1, r3
 8001102:	2302      	movs	r3, #2
 8001104:	2203      	movs	r2, #3
 8001106:	488a      	ldr	r0, [pc, #552]	; (8001330 <init_MPU+0x270>)
 8001108:	f003 fbb0 	bl	800486c <HAL_I2C_IsDeviceReady>
 800110c:	4603      	mov	r3, r0
 800110e:	2b02      	cmp	r3, #2
 8001110:	d104      	bne.n	800111c <init_MPU+0x5c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001116:	4887      	ldr	r0, [pc, #540]	; (8001334 <init_MPU+0x274>)
 8001118:	f002 fefe 	bl	8003f18 <HAL_GPIO_TogglePin>
//			I2C_ClearBusyFlagErratum(&i2c, 10);
    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800111c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001120:	4884      	ldr	r0, [pc, #528]	; (8001334 <init_MPU+0x274>)
 8001122:	f002 fef9 	bl	8003f18 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001126:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800112a:	b299      	uxth	r1, r3
 800112c:	2302      	movs	r3, #2
 800112e:	2203      	movs	r2, #3
 8001130:	487f      	ldr	r0, [pc, #508]	; (8001330 <init_MPU+0x270>)
 8001132:	f003 fb9b 	bl	800486c <HAL_I2C_IsDeviceReady>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1df      	bne.n	80010fc <init_MPU+0x3c>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001142:	487c      	ldr	r0, [pc, #496]	; (8001334 <init_MPU+0x274>)
 8001144:	f002 fed0 	bl	8003ee8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4879      	ldr	r0, [pc, #484]	; (8001334 <init_MPU+0x274>)
 8001150:	f002 feca 	bl	8003ee8 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001154:	236b      	movs	r3, #107	; 0x6b
 8001156:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001164:	b299      	uxth	r1, r3
 8001166:	f107 0220 	add.w	r2, r7, #32
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2302      	movs	r3, #2
 8001172:	486f      	ldr	r0, [pc, #444]	; (8001330 <init_MPU+0x270>)
 8001174:	f003 f822 	bl	80041bc <HAL_I2C_Master_Transmit>

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 8001178:	2319      	movs	r3, #25
 800117a:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 800117e:	2307      	movs	r3, #7
 8001180:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001184:	bf00      	nop
 8001186:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800118a:	b299      	uxth	r1, r3
 800118c:	f107 0220 	add.w	r2, r7, #32
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4865      	ldr	r0, [pc, #404]	; (8001330 <init_MPU+0x270>)
 800119a:	f003 f80f 	bl	80041bc <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <init_MPU+0xc6>

	d[0] = CONFIG;
 80011a4:	231a      	movs	r3, #26
 80011a6:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80011b0:	bf00      	nop
 80011b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b6:	b299      	uxth	r1, r3
 80011b8:	f107 0220 	add.w	r2, r7, #32
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2302      	movs	r3, #2
 80011c4:	485a      	ldr	r0, [pc, #360]	; (8001330 <init_MPU+0x270>)
 80011c6:	f002 fff9 	bl	80041bc <HAL_I2C_Master_Transmit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <init_MPU+0xf2>

	d[0] = GYRO_CONFIG;
 80011d0:	231b      	movs	r3, #27
 80011d2:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 80011d6:	2318      	movs	r3, #24
 80011d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80011dc:	bf00      	nop
 80011de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e2:	b299      	uxth	r1, r3
 80011e4:	f107 0220 	add.w	r2, r7, #32
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2302      	movs	r3, #2
 80011f0:	484f      	ldr	r0, [pc, #316]	; (8001330 <init_MPU+0x270>)
 80011f2:	f002 ffe3 	bl	80041bc <HAL_I2C_Master_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <init_MPU+0x11e>

	d[0] = ACCEL_CONFIG;
 80011fc:	231c      	movs	r3, #28
 80011fe:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001208:	bf00      	nop
 800120a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120e:	b299      	uxth	r1, r3
 8001210:	f107 0220 	add.w	r2, r7, #32
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2302      	movs	r3, #2
 800121c:	4844      	ldr	r0, [pc, #272]	; (8001330 <init_MPU+0x270>)
 800121e:	f002 ffcd 	bl	80041bc <HAL_I2C_Master_Transmit>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <init_MPU+0x14a>

	d[0] = ACCEL_CONFIG2;
 8001228:	231d      	movs	r3, #29
 800122a:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 800122e:	2302      	movs	r3, #2
 8001230:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001234:	bf00      	nop
 8001236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123a:	b299      	uxth	r1, r3
 800123c:	f107 0220 	add.w	r2, r7, #32
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2302      	movs	r3, #2
 8001248:	4839      	ldr	r0, [pc, #228]	; (8001330 <init_MPU+0x270>)
 800124a:	f002 ffb7 	bl	80041bc <HAL_I2C_Master_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <init_MPU+0x176>


	d[0] = INIT_ENB;
 8001254:	2338      	movs	r3, #56	; 0x38
 8001256:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 800125a:	2301      	movs	r3, #1
 800125c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001260:	bf00      	nop
 8001262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001266:	b299      	uxth	r1, r3
 8001268:	f107 0220 	add.w	r2, r7, #32
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2302      	movs	r3, #2
 8001274:	482e      	ldr	r0, [pc, #184]	; (8001330 <init_MPU+0x270>)
 8001276:	f002 ffa1 	bl	80041bc <HAL_I2C_Master_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <init_MPU+0x1a2>

	d[0] = USER_CTRL;
 8001280:	236a      	movs	r3, #106	; 0x6a
 8001282:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800128c:	bf00      	nop
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001292:	b299      	uxth	r1, r3
 8001294:	f107 0220 	add.w	r2, r7, #32
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2302      	movs	r3, #2
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <init_MPU+0x270>)
 80012a2:	f002 ff8b 	bl	80041bc <HAL_I2C_Master_Transmit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <init_MPU+0x1ce>

	d[0] = INT_BYPASS;
 80012ac:	2337      	movs	r3, #55	; 0x37
 80012ae:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 80012b2:	2322      	movs	r3, #34	; 0x22
 80012b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012b8:	bf00      	nop
 80012ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012be:	b299      	uxth	r1, r3
 80012c0:	f107 0220 	add.w	r2, r7, #32
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2302      	movs	r3, #2
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <init_MPU+0x270>)
 80012ce:	f002 ff75 	bl	80041bc <HAL_I2C_Master_Transmit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <init_MPU+0x1fa>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 80012d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012dc:	b299      	uxth	r1, r3
 80012de:	23c8      	movs	r3, #200	; 0xc8
 80012e0:	2203      	movs	r2, #3
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <init_MPU+0x270>)
 80012e4:	f003 fac2 	bl	800486c <HAL_I2C_IsDeviceReady>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d026      	beq.n	800133c <init_MPU+0x27c>
	    	strcpy( rx_data, "No Device \r \n");
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <init_MPU+0x278>)
 80012f2:	461c      	mov	r4, r3
 80012f4:	4613      	mov	r3, r2
 80012f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f8:	c407      	stmia	r4!, {r0, r1, r2}
 80012fa:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	480c      	ldr	r0, [pc, #48]	; (8001334 <init_MPU+0x274>)
 8001304:	f002 fdf0 	bl	8003ee8 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <init_MPU+0x274>)
 8001310:	f002 fdea 	bl	8003ee8 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f001 fcda 	bl	8002cd0 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <init_MPU+0x274>)
 8001324:	f002 fde0 	bl	8003ee8 <HAL_GPIO_WritePin>
 8001328:	e0e1      	b.n	80014ee <init_MPU+0x42e>
 800132a:	bf00      	nop
 800132c:	20000298 	.word	0x20000298
 8001330:	20000160 	.word	0x20000160
 8001334:	40010c00 	.word	0x40010c00
 8001338:	08006e40 	.word	0x08006e40
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 800133c:	230a      	movs	r3, #10
 800133e:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 8001342:	231f      	movs	r3, #31
 8001344:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001348:	bf00      	nop
 800134a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800134e:	b299      	uxth	r1, r3
 8001350:	f107 0220 	add.w	r2, r7, #32
 8001354:	2302      	movs	r3, #2
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2302      	movs	r3, #2
 800135a:	4868      	ldr	r0, [pc, #416]	; (80014fc <init_MPU+0x43c>)
 800135c:	f002 ff2e 	bl	80041bc <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f1      	bne.n	800134a <init_MPU+0x28a>

	    	  	HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f001 fcb2 	bl	8002cd0 <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 800136c:	2310      	movs	r3, #16
 800136e:	70fb      	strb	r3, [r7, #3]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001370:	bf00      	nop
 8001372:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001376:	b299      	uxth	r1, r3
 8001378:	1cfa      	adds	r2, r7, #3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	485e      	ldr	r0, [pc, #376]	; (80014fc <init_MPU+0x43c>)
 8001384:	f002 ff1a 	bl	80041bc <HAL_I2C_Master_Transmit>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f1      	bne.n	8001372 <init_MPU+0x2b2>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 800138e:	bf00      	nop
 8001390:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001394:	b299      	uxth	r1, r3
 8001396:	463a      	mov	r2, r7
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2303      	movs	r3, #3
 80013a0:	4856      	ldr	r0, [pc, #344]	; (80014fc <init_MPU+0x43c>)
 80013a2:	f003 f809 	bl	80043b8 <HAL_I2C_Master_Receive>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f1      	bne.n	8001390 <init_MPU+0x2d0>

	    	      asax = (asa[0]-128)*0.5/128+1;
 80013ac:	783b      	ldrb	r3, [r7, #0]
 80013ae:	3b80      	subs	r3, #128	; 0x80
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f81f 	bl	80003f4 <__aeabi_i2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <init_MPU+0x440>)
 80013bc:	f7ff f884 	bl	80004c8 <__aeabi_dmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <init_MPU+0x444>)
 80013ce:	f7ff f9a5 	bl	800071c <__aeabi_ddiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	4618      	mov	r0, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <init_MPU+0x448>)
 80013e0:	f7fe febc 	bl	800015c <__adddf3>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4618      	mov	r0, r3
 80013ea:	4621      	mov	r1, r4
 80013ec:	f7ff fb44 	bl	8000a78 <__aeabi_d2f>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <init_MPU+0x44c>)
 80013f4:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 80013f6:	787b      	ldrb	r3, [r7, #1]
 80013f8:	3b80      	subs	r3, #128	; 0x80
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fffa 	bl	80003f4 <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <init_MPU+0x440>)
 8001406:	f7ff f85f 	bl	80004c8 <__aeabi_dmul>
 800140a:	4603      	mov	r3, r0
 800140c:	460c      	mov	r4, r1
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <init_MPU+0x444>)
 8001418:	f7ff f980 	bl	800071c <__aeabi_ddiv>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4618      	mov	r0, r3
 8001422:	4621      	mov	r1, r4
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <init_MPU+0x448>)
 800142a:	f7fe fe97 	bl	800015c <__adddf3>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	4618      	mov	r0, r3
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff fb1f 	bl	8000a78 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <init_MPU+0x450>)
 800143e:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	3b80      	subs	r3, #128	; 0x80
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe ffd5 	bl	80003f4 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <init_MPU+0x440>)
 8001450:	f7ff f83a 	bl	80004c8 <__aeabi_dmul>
 8001454:	4603      	mov	r3, r0
 8001456:	460c      	mov	r4, r1
 8001458:	4618      	mov	r0, r3
 800145a:	4621      	mov	r1, r4
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <init_MPU+0x444>)
 8001462:	f7ff f95b 	bl	800071c <__aeabi_ddiv>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4618      	mov	r0, r3
 800146c:	4621      	mov	r1, r4
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <init_MPU+0x448>)
 8001474:	f7fe fe72 	bl	800015c <__adddf3>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4618      	mov	r0, r3
 800147e:	4621      	mov	r1, r4
 8001480:	f7ff fafa 	bl	8000a78 <__aeabi_d2f>
 8001484:	4602      	mov	r2, r0
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <init_MPU+0x454>)
 8001488:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 800148a:	230a      	movs	r3, #10
 800148c:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001496:	bf00      	nop
 8001498:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800149c:	b299      	uxth	r1, r3
 800149e:	f107 0220 	add.w	r2, r7, #32
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <init_MPU+0x43c>)
 80014ac:	f002 fe86 	bl	80041bc <HAL_I2C_Master_Transmit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <init_MPU+0x3d8>

	    	      HAL_Delay(100);
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f001 fc0a 	bl	8002cd0 <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 80014bc:	230a      	movs	r3, #10
 80014be:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 80014c2:	2316      	movs	r3, #22
 80014c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80014c8:	bf00      	nop
 80014ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ce:	b299      	uxth	r1, r3
 80014d0:	f107 0220 	add.w	r2, r7, #32
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2302      	movs	r3, #2
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <init_MPU+0x43c>)
 80014de:	f002 fe6d 	bl	80041bc <HAL_I2C_Master_Transmit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f0      	bne.n	80014ca <init_MPU+0x40a>
	    	      HAL_Delay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f001 fbf1 	bl	8002cd0 <HAL_Delay>
	      }


  return status;
 80014ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	372c      	adds	r7, #44	; 0x2c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000160 	.word	0x20000160
 8001500:	3fe00000 	.word	0x3fe00000
 8001504:	40600000 	.word	0x40600000
 8001508:	3ff00000 	.word	0x3ff00000
 800150c:	20000574 	.word	0x20000574
 8001510:	20000304 	.word	0x20000304
 8001514:	2000056c 	.word	0x2000056c

08001518 <process_MPU>:
	  Acc_z_  = 0;

}


IMU_data process_MPU(uint8_t EKF, uint8_t LPF){
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b090      	sub	sp, #64	; 0x40
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	4613      	mov	r3, r2
 8001526:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 8001528:	233b      	movs	r3, #59	; 0x3b
 800152a:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 800152c:	23d0      	movs	r3, #208	; 0xd0
 800152e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK){
 8001532:	bf00      	nop
 8001534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001538:	b299      	uxth	r1, r3
 800153a:	f107 020b 	add.w	r2, r7, #11
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	4894      	ldr	r0, [pc, #592]	; (8001798 <process_MPU+0x280>)
 8001548:	f002 fe38 	bl	80041bc <HAL_I2C_Master_Transmit>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <process_MPU+0x1c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK){
 8001552:	bf00      	nop
 8001554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001558:	b299      	uxth	r1, r3
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	230e      	movs	r3, #14
 8001566:	488c      	ldr	r0, [pc, #560]	; (8001798 <process_MPU+0x280>)
 8001568:	f002 ff26 	bl	80043b8 <HAL_I2C_Master_Receive>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <process_MPU+0x3c>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001572:	7b3b      	ldrb	r3, [r7, #12]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb83 	bl	8000c8c <__aeabi_i2f>
 8001586:	4602      	mov	r2, r0
 8001588:	4b84      	ldr	r3, [pc, #528]	; (800179c <process_MPU+0x284>)
 800158a:	601a      	str	r2, [r3, #0]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb76 	bl	8000c8c <__aeabi_i2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <process_MPU+0x288>)
 80015a4:	601a      	str	r2, [r3, #0]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80015a6:	7c3b      	ldrb	r3, [r7, #16]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7c7b      	ldrb	r3, [r7, #17]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb69 	bl	8000c8c <__aeabi_i2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <process_MPU+0x28c>)
 80015be:	601a      	str	r2, [r3, #0]

    temp = (int16_t)(data[6] << 8 | data[7]);
 80015c0:	7cbb      	ldrb	r3, [r7, #18]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb5c 	bl	8000c8c <__aeabi_i2f>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <process_MPU+0x290>)
 80015d8:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80015da:	7d3b      	ldrb	r3, [r7, #20]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	7d7b      	ldrb	r3, [r7, #21]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb4f 	bl	8000c8c <__aeabi_i2f>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <process_MPU+0x294>)
 80015f2:	601a      	str	r2, [r3, #0]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb42 	bl	8000c8c <__aeabi_i2f>
 8001608:	4602      	mov	r2, r0
 800160a:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <process_MPU+0x298>)
 800160c:	601a      	str	r2, [r3, #0]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800160e:	7e3b      	ldrb	r3, [r7, #24]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	7e7b      	ldrb	r3, [r7, #25]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb35 	bl	8000c8c <__aeabi_i2f>
 8001622:	4602      	mov	r2, r0
 8001624:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <process_MPU+0x29c>)
 8001626:	601a      	str	r2, [r3, #0]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <process_MPU+0x284>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fef3 	bl	8000418 <__aeabi_f2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <process_MPU+0x2a0>)
 8001638:	f7ff f870 	bl	800071c <__aeabi_ddiv>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4618      	mov	r0, r3
 8001642:	4621      	mov	r1, r4
 8001644:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <process_MPU+0x2a4>)
 8001646:	cb18      	ldmia	r3, {r3, r4}
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7fe fd84 	bl	8000158 <__aeabi_dsub>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	4618      	mov	r0, r3
 8001656:	4621      	mov	r1, r4
 8001658:	f7ff fa0e 	bl	8000a78 <__aeabi_d2f>
 800165c:	4602      	mov	r2, r0
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <process_MPU+0x284>)
 8001660:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <process_MPU+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fed6 	bl	8000418 <__aeabi_f2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <process_MPU+0x2a0>)
 8001672:	f7ff f853 	bl	800071c <__aeabi_ddiv>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <process_MPU+0x2a8>)
 8001680:	cb18      	ldmia	r3, {r3, r4}
 8001682:	461a      	mov	r2, r3
 8001684:	4623      	mov	r3, r4
 8001686:	f7fe fd67 	bl	8000158 <__aeabi_dsub>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4618      	mov	r0, r3
 8001690:	4621      	mov	r1, r4
 8001692:	f7ff f9f1 	bl	8000a78 <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <process_MPU+0x288>)
 800169a:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <process_MPU+0x28c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe feb9 	bl	8000418 <__aeabi_f2d>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <process_MPU+0x2a0>)
 80016ac:	f7ff f836 	bl	800071c <__aeabi_ddiv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	460c      	mov	r4, r1
 80016b4:	4618      	mov	r0, r3
 80016b6:	4621      	mov	r1, r4
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <process_MPU+0x2ac>)
 80016ba:	cb18      	ldmia	r3, {r3, r4}
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	f7fe fd4c 	bl	800015c <__adddf3>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	f7ff f9d4 	bl	8000a78 <__aeabi_d2f>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <process_MPU+0x28c>)
 80016d4:	601a      	str	r2, [r3, #0]
    if(!EKF){
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d17b      	bne.n	80017d4 <process_MPU+0x2bc>
	Gyro_x = (Gyro_x )/16.4- bGx;
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <process_MPU+0x294>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fe99 	bl	8000418 <__aeabi_f2d>
 80016e6:	a32a      	add	r3, pc, #168	; (adr r3, 8001790 <process_MPU+0x278>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f816 	bl	800071c <__aeabi_ddiv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	4618      	mov	r0, r3
 80016f6:	4621      	mov	r1, r4
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <process_MPU+0x2b0>)
 80016fa:	cb18      	ldmia	r3, {r3, r4}
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	f7fe fd2a 	bl	8000158 <__aeabi_dsub>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	4618      	mov	r0, r3
 800170a:	4621      	mov	r1, r4
 800170c:	f7ff f9b4 	bl	8000a78 <__aeabi_d2f>
 8001710:	4602      	mov	r2, r0
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <process_MPU+0x294>)
 8001714:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <process_MPU+0x298>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fe7c 	bl	8000418 <__aeabi_f2d>
 8001720:	a31b      	add	r3, pc, #108	; (adr r3, 8001790 <process_MPU+0x278>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe fff9 	bl	800071c <__aeabi_ddiv>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	4618      	mov	r0, r3
 8001730:	4621      	mov	r1, r4
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <process_MPU+0x2b4>)
 8001734:	cb18      	ldmia	r3, {r3, r4}
 8001736:	461a      	mov	r2, r3
 8001738:	4623      	mov	r3, r4
 800173a:	f7fe fd0d 	bl	8000158 <__aeabi_dsub>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_d2f>
 800174a:	4602      	mov	r2, r0
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <process_MPU+0x298>)
 800174e:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <process_MPU+0x29c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe5f 	bl	8000418 <__aeabi_f2d>
 800175a:	a30d      	add	r3, pc, #52	; (adr r3, 8001790 <process_MPU+0x278>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ffdc 	bl	800071c <__aeabi_ddiv>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4618      	mov	r0, r3
 800176a:	4621      	mov	r1, r4
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <process_MPU+0x2b8>)
 800176e:	cb18      	ldmia	r3, {r3, r4}
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	f7fe fcf0 	bl	8000158 <__aeabi_dsub>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	4618      	mov	r0, r3
 800177e:	4621      	mov	r1, r4
 8001780:	f7ff f97a 	bl	8000a78 <__aeabi_d2f>
 8001784:	4602      	mov	r2, r0
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <process_MPU+0x29c>)
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e05c      	b.n	8001846 <process_MPU+0x32e>
 800178c:	f3af 8000 	nop.w
 8001790:	66666666 	.word	0x66666666
 8001794:	40306666 	.word	0x40306666
 8001798:	20000160 	.word	0x20000160
 800179c:	2000027c 	.word	0x2000027c
 80017a0:	200001e4 	.word	0x200001e4
 80017a4:	200000b4 	.word	0x200000b4
 80017a8:	2000020c 	.word	0x2000020c
 80017ac:	20000110 	.word	0x20000110
 80017b0:	20000540 	.word	0x20000540
 80017b4:	20000268 	.word	0x20000268
 80017b8:	40d00000 	.word	0x40d00000
 80017bc:	20000520 	.word	0x20000520
 80017c0:	20000288 	.word	0x20000288
 80017c4:	20000558 	.word	0x20000558
 80017c8:	20000360 	.word	0x20000360
 80017cc:	200001b8 	.word	0x200001b8
 80017d0:	20000560 	.word	0x20000560
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <process_MPU+0x380>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe1d 	bl	8000418 <__aeabi_f2d>
 80017de:	a32c      	add	r3, pc, #176	; (adr r3, 8001890 <process_MPU+0x378>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff9a 	bl	800071c <__aeabi_ddiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	4618      	mov	r0, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	f7ff f942 	bl	8000a78 <__aeabi_d2f>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <process_MPU+0x380>)
 80017f8:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <process_MPU+0x384>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe0a 	bl	8000418 <__aeabi_f2d>
 8001804:	a322      	add	r3, pc, #136	; (adr r3, 8001890 <process_MPU+0x378>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe ff87 	bl	800071c <__aeabi_ddiv>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	4618      	mov	r0, r3
 8001814:	4621      	mov	r1, r4
 8001816:	f7ff f92f 	bl	8000a78 <__aeabi_d2f>
 800181a:	4602      	mov	r2, r0
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <process_MPU+0x384>)
 800181e:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <process_MPU+0x388>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fdf7 	bl	8000418 <__aeabi_f2d>
 800182a:	a319      	add	r3, pc, #100	; (adr r3, 8001890 <process_MPU+0x378>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff74 	bl	800071c <__aeabi_ddiv>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	4618      	mov	r0, r3
 800183a:	4621      	mov	r1, r4
 800183c:	f7ff f91c 	bl	8000a78 <__aeabi_d2f>
 8001840:	4602      	mov	r2, r0
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <process_MPU+0x388>)
 8001844:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 8001846:	78bb      	ldrb	r3, [r7, #2]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <process_MPU+0x358>
		data_raw.Gyro_x = Gyro_x;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <process_MPU+0x380>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
		data_raw.Gyro_y = Gyro_y;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <process_MPU+0x384>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	623b      	str	r3, [r7, #32]
		data_raw.Gyro_z = Gyro_z;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <process_MPU+0x388>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
		data_raw.Acc_x = Acc_x;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <process_MPU+0x38c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
		data_raw.Acc_y = Acc_y;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <process_MPU+0x390>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
		data_raw.Acc_z = Acc_z;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <process_MPU+0x394>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    return data_raw;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	461d      	mov	r5, r3
 8001874:	f107 041c 	add.w	r4, r7, #28
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001880:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bdb0      	pop	{r4, r5, r7, pc}
 800188c:	f3af 8000 	nop.w
 8001890:	66666666 	.word	0x66666666
 8001894:	40306666 	.word	0x40306666
 8001898:	20000110 	.word	0x20000110
 800189c:	20000540 	.word	0x20000540
 80018a0:	20000268 	.word	0x20000268
 80018a4:	2000027c 	.word	0x2000027c
 80018a8:	200001e4 	.word	0x200001e4
 80018ac:	200000b4 	.word	0x200000b4

080018b0 <calibration_IMU>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
IMU_calib_data calibration_IMU(){
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	b099      	sub	sp, #100	; 0x64
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	6078      	str	r0, [r7, #4]
	    IMU_calib_data data_;
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 80018b8:	233b      	movs	r3, #59	; 0x3b
 80018ba:	73fb      	strb	r3, [r7, #15]
		uint8_t device_address = MPU_ADDRESS;
 80018bc:	23d0      	movs	r3, #208	; 0xd0
 80018be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        for(int i = 0; i<200; i++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	657b      	str	r3, [r7, #84]	; 0x54
 80018c6:	e130      	b.n	8001b2a <calibration_IMU+0x27a>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 80018c8:	bf00      	nop
 80018ca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018ce:	b299      	uxth	r1, r3
 80018d0:	f107 020f 	add.w	r2, r7, #15
 80018d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	48ac      	ldr	r0, [pc, #688]	; (8001b90 <calibration_IMU+0x2e0>)
 80018de:	f002 fc6d 	bl	80041bc <HAL_I2C_Master_Transmit>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <calibration_IMU+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 80018e8:	bf00      	nop
 80018ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80018ee:	b299      	uxth	r1, r3
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	230e      	movs	r3, #14
 80018fc:	48a4      	ldr	r0, [pc, #656]	; (8001b90 <calibration_IMU+0x2e0>)
 80018fe:	f002 fd5b 	bl	80043b8 <HAL_I2C_Master_Receive>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <calibration_IMU+0x3a>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8001908:	7c3b      	ldrb	r3, [r7, #16]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	7c7b      	ldrb	r3, [r7, #17]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd6c 	bl	80003f4 <__aeabi_i2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b9c      	ldr	r3, [pc, #624]	; (8001b94 <calibration_IMU+0x2e4>)
 8001922:	f7fe fefb 	bl	800071c <__aeabi_ddiv>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f7ff f8a3 	bl	8000a78 <__aeabi_d2f>
 8001932:	4602      	mov	r2, r0
 8001934:	4b98      	ldr	r3, [pc, #608]	; (8001b98 <calibration_IMU+0x2e8>)
 8001936:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 8001938:	7cbb      	ldrb	r3, [r7, #18]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fd54 	bl	80003f4 <__aeabi_i2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b90      	ldr	r3, [pc, #576]	; (8001b94 <calibration_IMU+0x2e4>)
 8001952:	f7fe fee3 	bl	800071c <__aeabi_ddiv>
 8001956:	4603      	mov	r3, r0
 8001958:	460c      	mov	r4, r1
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	f7ff f88b 	bl	8000a78 <__aeabi_d2f>
 8001962:	4602      	mov	r2, r0
 8001964:	4b8d      	ldr	r3, [pc, #564]	; (8001b9c <calibration_IMU+0x2ec>)
 8001966:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 8001968:	7d3b      	ldrb	r3, [r7, #20]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21a      	sxth	r2, r3
 800196e:	7d7b      	ldrb	r3, [r7, #21]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21b      	sxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd3c 	bl	80003f4 <__aeabi_i2d>
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <calibration_IMU+0x2e4>)
 8001982:	f7fe fecb 	bl	800071c <__aeabi_ddiv>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	4618      	mov	r0, r3
 800198c:	4621      	mov	r1, r4
 800198e:	f7ff f873 	bl	8000a78 <__aeabi_d2f>
 8001992:	4602      	mov	r2, r0
 8001994:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <calibration_IMU+0x2f0>)
 8001996:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8001998:	7dbb      	ldrb	r3, [r7, #22]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b21a      	sxth	r2, r3
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f970 	bl	8000c8c <__aeabi_i2f>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <calibration_IMU+0x2f4>)
 80019b0:	601a      	str	r2, [r3, #0]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 80019b2:	7e3b      	ldrb	r3, [r7, #24]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	7e7b      	ldrb	r3, [r7, #25]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd17 	bl	80003f4 <__aeabi_i2d>
 80019c6:	a370      	add	r3, pc, #448	; (adr r3, 8001b88 <calibration_IMU+0x2d8>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fea6 	bl	800071c <__aeabi_ddiv>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	4618      	mov	r0, r3
 80019d6:	4621      	mov	r1, r4
 80019d8:	f7ff f84e 	bl	8000a78 <__aeabi_d2f>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <calibration_IMU+0x2f8>)
 80019e0:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 80019e2:	7ebb      	ldrb	r3, [r7, #26]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	7efb      	ldrb	r3, [r7, #27]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fcff 	bl	80003f4 <__aeabi_i2d>
 80019f6:	a364      	add	r3, pc, #400	; (adr r3, 8001b88 <calibration_IMU+0x2d8>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fe8e 	bl	800071c <__aeabi_ddiv>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f7ff f836 	bl	8000a78 <__aeabi_d2f>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <calibration_IMU+0x2fc>)
 8001a10:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8001a12:	7f3b      	ldrb	r3, [r7, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	7f7b      	ldrb	r3, [r7, #29]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fce7 	bl	80003f4 <__aeabi_i2d>
 8001a26:	a358      	add	r3, pc, #352	; (adr r3, 8001b88 <calibration_IMU+0x2d8>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fe76 	bl	800071c <__aeabi_ddiv>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	4618      	mov	r0, r3
 8001a36:	4621      	mov	r1, r4
 8001a38:	f7ff f81e 	bl	8000a78 <__aeabi_d2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <calibration_IMU+0x300>)
 8001a40:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 8001a42:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <calibration_IMU+0x2e8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fce6 	bl	8000418 <__aeabi_f2d>
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <calibration_IMU+0x304>)
 8001a4e:	cb18      	ldmia	r3, {r3, r4}
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	f7fe fb82 	bl	800015c <__adddf3>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <calibration_IMU+0x304>)
 8001a5e:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <calibration_IMU+0x2ec>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcd6 	bl	8000418 <__aeabi_f2d>
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <calibration_IMU+0x308>)
 8001a6e:	cb18      	ldmia	r3, {r3, r4}
 8001a70:	461a      	mov	r2, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	f7fe fb72 	bl	800015c <__adddf3>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <calibration_IMU+0x308>)
 8001a7e:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <calibration_IMU+0x2f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fcc6 	bl	8000418 <__aeabi_f2d>
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <calibration_IMU+0x30c>)
 8001a8e:	cb18      	ldmia	r3, {r3, r4}
 8001a90:	461a      	mov	r2, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	f7fe fb62 	bl	800015c <__adddf3>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <calibration_IMU+0x30c>)
 8001a9e:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <calibration_IMU+0x2f8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcb6 	bl	8000418 <__aeabi_f2d>
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <calibration_IMU+0x310>)
 8001aae:	cb18      	ldmia	r3, {r3, r4}
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	f7fe fb52 	bl	800015c <__adddf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <calibration_IMU+0x310>)
 8001abe:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <calibration_IMU+0x2fc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fca6 	bl	8000418 <__aeabi_f2d>
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <calibration_IMU+0x314>)
 8001ace:	cb18      	ldmia	r3, {r3, r4}
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	f7fe fb42 	bl	800015c <__adddf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4a39      	ldr	r2, [pc, #228]	; (8001bc4 <calibration_IMU+0x314>)
 8001ade:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <calibration_IMU+0x300>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc96 	bl	8000418 <__aeabi_f2d>
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <calibration_IMU+0x318>)
 8001aee:	cb18      	ldmia	r3, {r3, r4}
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	f7fe fb32 	bl	800015c <__adddf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <calibration_IMU+0x318>)
 8001afe:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b06:	4831      	ldr	r0, [pc, #196]	; (8001bcc <calibration_IMU+0x31c>)
 8001b08:	f002 fa06 	bl	8003f18 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <calibration_IMU+0x320>)
 8001b12:	f002 fa01 	bl	8003f18 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001b16:	2104      	movs	r1, #4
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <calibration_IMU+0x31c>)
 8001b1a:	f002 f9fd 	bl	8003f18 <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 8001b1e:	201e      	movs	r0, #30
 8001b20:	f001 f8d6 	bl	8002cd0 <HAL_Delay>
        for(int i = 0; i<200; i++){
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	3301      	adds	r3, #1
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2c:	2bc7      	cmp	r3, #199	; 0xc7
 8001b2e:	f77f aecb 	ble.w	80018c8 <calibration_IMU+0x18>
        }

     bAx /= 200;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <calibration_IMU+0x304>)
 8001b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <calibration_IMU+0x324>)
 8001b3e:	f7fe fded 	bl	800071c <__aeabi_ddiv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <calibration_IMU+0x304>)
 8001b48:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <calibration_IMU+0x308>)
 8001b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <calibration_IMU+0x324>)
 8001b58:	f7fe fde0 	bl	800071c <__aeabi_ddiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <calibration_IMU+0x308>)
 8001b62:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <calibration_IMU+0x30c>)
 8001b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <calibration_IMU+0x324>)
 8001b72:	f7fe fdd3 	bl	800071c <__aeabi_ddiv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <calibration_IMU+0x30c>)
 8001b7c:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <calibration_IMU+0x304>)
 8001b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b86:	e027      	b.n	8001bd8 <calibration_IMU+0x328>
 8001b88:	66666666 	.word	0x66666666
 8001b8c:	40306666 	.word	0x40306666
 8001b90:	20000160 	.word	0x20000160
 8001b94:	40d00000 	.word	0x40d00000
 8001b98:	2000027c 	.word	0x2000027c
 8001b9c:	200001e4 	.word	0x200001e4
 8001ba0:	200000b4 	.word	0x200000b4
 8001ba4:	2000020c 	.word	0x2000020c
 8001ba8:	20000110 	.word	0x20000110
 8001bac:	20000540 	.word	0x20000540
 8001bb0:	20000268 	.word	0x20000268
 8001bb4:	20000520 	.word	0x20000520
 8001bb8:	20000288 	.word	0x20000288
 8001bbc:	20000558 	.word	0x20000558
 8001bc0:	20000360 	.word	0x20000360
 8001bc4:	200001b8 	.word	0x200001b8
 8001bc8:	20000560 	.word	0x20000560
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40690000 	.word	0x40690000
 8001bd8:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <calibration_IMU+0x50c>)
 8001bda:	cb18      	ldmia	r3, {r3, r4}
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	f7fe fc72 	bl	80004c8 <__aeabi_dmul>
 8001be4:	4603      	mov	r3, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	461d      	mov	r5, r3
 8001bea:	4626      	mov	r6, r4
 8001bec:	4b74      	ldr	r3, [pc, #464]	; (8001dc0 <calibration_IMU+0x510>)
 8001bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <calibration_IMU+0x510>)
 8001bf4:	cb18      	ldmia	r3, {r3, r4}
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f7fe fc65 	bl	80004c8 <__aeabi_dmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	461a      	mov	r2, r3
 8001c04:	4623      	mov	r3, r4
 8001c06:	4628      	mov	r0, r5
 8001c08:	4631      	mov	r1, r6
 8001c0a:	f7fe faa7 	bl	800015c <__adddf3>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	461d      	mov	r5, r3
 8001c14:	4626      	mov	r6, r4
 8001c16:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <calibration_IMU+0x514>)
 8001c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1c:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <calibration_IMU+0x514>)
 8001c1e:	cb18      	ldmia	r3, {r3, r4}
 8001c20:	461a      	mov	r2, r3
 8001c22:	4623      	mov	r3, r4
 8001c24:	f7fe fc50 	bl	80004c8 <__aeabi_dmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	4628      	mov	r0, r5
 8001c32:	4631      	mov	r1, r6
 8001c34:	f7fe fa92 	bl	800015c <__adddf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4621      	mov	r1, r4
 8001c40:	f004 fff0 	bl	8006c24 <sqrt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	4a5f      	ldr	r2, [pc, #380]	; (8001dc8 <calibration_IMU+0x518>)
 8001c4a:	e9c2 3400 	strd	r3, r4, [r2]
     bAz = -1 - bAz;
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <calibration_IMU+0x514>)
 8001c50:	cb18      	ldmia	r3, {r3, r4}
 8001c52:	461a      	mov	r2, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	495c      	ldr	r1, [pc, #368]	; (8001dcc <calibration_IMU+0x51c>)
 8001c5c:	f7fe fa7c 	bl	8000158 <__aeabi_dsub>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <calibration_IMU+0x514>)
 8001c66:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <calibration_IMU+0x520>)
 8001c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <calibration_IMU+0x524>)
 8001c76:	f7fe fd51 	bl	800071c <__aeabi_ddiv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <calibration_IMU+0x520>)
 8001c80:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 8001c84:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <calibration_IMU+0x528>)
 8001c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <calibration_IMU+0x524>)
 8001c90:	f7fe fd44 	bl	800071c <__aeabi_ddiv>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <calibration_IMU+0x528>)
 8001c9a:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <calibration_IMU+0x52c>)
 8001ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <calibration_IMU+0x524>)
 8001caa:	f7fe fd37 	bl	800071c <__aeabi_ddiv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <calibration_IMU+0x52c>)
 8001cb4:	e9c2 3400 	strd	r3, r4, [r2]

     data_.bAx = bAx;
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <calibration_IMU+0x50c>)
 8001cba:	cb18      	ldmia	r3, {r3, r4}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f7fe feda 	bl	8000a78 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
     data_.bAy = bAy;
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <calibration_IMU+0x510>)
 8001cca:	cb18      	ldmia	r3, {r3, r4}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4621      	mov	r1, r4
 8001cd0:	f7fe fed2 	bl	8000a78 <__aeabi_d2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
     data_.bAz = bAz;
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <calibration_IMU+0x514>)
 8001cda:	cb18      	ldmia	r3, {r3, r4}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f7fe feca 	bl	8000a78 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34

     data_.bGx = bGx;
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <calibration_IMU+0x520>)
 8001cea:	cb18      	ldmia	r3, {r3, r4}
 8001cec:	4618      	mov	r0, r3
 8001cee:	4621      	mov	r1, r4
 8001cf0:	f7fe fec2 	bl	8000a78 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	623b      	str	r3, [r7, #32]
     data_.bGy = bGy;
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <calibration_IMU+0x528>)
 8001cfa:	cb18      	ldmia	r3, {r3, r4}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4621      	mov	r1, r4
 8001d00:	f7fe feba 	bl	8000a78 <__aeabi_d2f>
 8001d04:	4603      	mov	r3, r0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
     data_.bGz = bGz;
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <calibration_IMU+0x52c>)
 8001d0a:	cb18      	ldmia	r3, {r3, r4}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe feb2 	bl	8000a78 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28

     data_.data[0] = bAx;
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <calibration_IMU+0x50c>)
 8001d1a:	cb18      	ldmia	r3, {r3, r4}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4621      	mov	r1, r4
 8001d20:	f7fe feaa 	bl	8000a78 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
     data_.data[1] = bAy;
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <calibration_IMU+0x510>)
 8001d2a:	cb18      	ldmia	r3, {r3, r4}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	4621      	mov	r1, r4
 8001d30:	f7fe fea2 	bl	8000a78 <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
     data_.data[2] = bAz;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <calibration_IMU+0x514>)
 8001d3a:	cb18      	ldmia	r3, {r3, r4}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f7fe fe9a 	bl	8000a78 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40

     data_.data[3] = bGx;
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <calibration_IMU+0x520>)
 8001d4a:	cb18      	ldmia	r3, {r3, r4}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	4621      	mov	r1, r4
 8001d50:	f7fe fe92 	bl	8000a78 <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
     data_.data[4] = bGy;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <calibration_IMU+0x528>)
 8001d5a:	cb18      	ldmia	r3, {r3, r4}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	4621      	mov	r1, r4
 8001d60:	f7fe fe8a 	bl	8000a78 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
     data_.data[5] = bGz;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <calibration_IMU+0x52c>)
 8001d6a:	cb18      	ldmia	r3, {r3, r4}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4621      	mov	r1, r4
 8001d70:	f7fe fe82 	bl	8000a78 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7e:	4818      	ldr	r0, [pc, #96]	; (8001de0 <calibration_IMU+0x530>)
 8001d80:	f002 f8b2 	bl	8003ee8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <calibration_IMU+0x530>)
 8001d8c:	f002 f8ac 	bl	8003ee8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2104      	movs	r1, #4
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <calibration_IMU+0x530>)
 8001d96:	f002 f8a7 	bl	8003ee8 <HAL_GPIO_WritePin>
	 return data_;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	f107 0420 	add.w	r4, r7, #32
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	375c      	adds	r7, #92	; 0x5c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000520 	.word	0x20000520
 8001dc0:	20000288 	.word	0x20000288
 8001dc4:	20000558 	.word	0x20000558
 8001dc8:	200001d8 	.word	0x200001d8
 8001dcc:	bff00000 	.word	0xbff00000
 8001dd0:	20000360 	.word	0x20000360
 8001dd4:	40690000 	.word	0x40690000
 8001dd8:	200001b8 	.word	0x200001b8
 8001ddc:	20000560 	.word	0x20000560
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <Motor1>:
float Kd = 1;
float T = 0.01;


void Motor1(int pulse_width)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	if(pulse_width<0){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da0c      	bge.n	8001e0c <Motor1+0x28>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <Motor1+0x44>)
 8001dfa:	f002 f875 	bl	8003ee8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 999 + pulse_width);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <Motor1+0x48>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_width);
	}

}
 8001e0a:	e009      	b.n	8001e20 <Motor1+0x3c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <Motor1+0x44>)
 8001e14:	f002 f868 	bl	8003ee8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_width);
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <Motor1+0x48>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40010800 	.word	0x40010800
 8001e2c:	20000314 	.word	0x20000314

08001e30 <Motor2>:

void Motor2(int pulse_width)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if(pulse_width<0){
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da0c      	bge.n	8001e58 <Motor2+0x28>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <Motor2+0x44>)
 8001e46:	f002 f84f 	bl	8003ee8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 999 + pulse_width);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <Motor2+0x48>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_width);
	}

}
 8001e56:	e009      	b.n	8001e6c <Motor2+0x3c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <Motor2+0x44>)
 8001e60:	f002 f842 	bl	8003ee8 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_width);
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <Motor2+0x48>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40010800 	.word	0x40010800
 8001e78:	20000314 	.word	0x20000314

08001e7c <PID>:



void PID(float setpoint, float input, int velocity){
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
		Error = setpoint - input;
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7fe fe48 	bl	8000b20 <__aeabi_fsub>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <PID+0x140>)
 8001e96:	601a      	str	r2, [r3, #0]
		P_part = Kp*(Error);
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <PID+0x144>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <PID+0x140>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7fe ff46 	bl	8000d34 <__aeabi_fmul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <PID+0x148>)
 8001eae:	601a      	str	r2, [r3, #0]
		I_part += Ki*T*Error;
 8001eb0:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <PID+0x14c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <PID+0x150>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7fe ff3a 	bl	8000d34 <__aeabi_fmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <PID+0x140>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f7fe ff32 	bl	8000d34 <__aeabi_fmul>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <PID+0x154>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe fe22 	bl	8000b24 <__addsf3>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <PID+0x154>)
 8001ee6:	601a      	str	r2, [r3, #0]
		if(I_part > 300){
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <PID+0x154>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <PID+0x158>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f8dc 	bl	80010ac <__aeabi_fcmpgt>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <PID+0x84>
			I_part = 300;
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <PID+0x154>)
 8001efc:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <PID+0x158>)
 8001efe:	601a      	str	r2, [r3, #0]
		}
		D_part = Kd*(Error - pre_Error)/T;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <PID+0x140>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <PID+0x15c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f7fe fe08 	bl	8000b20 <__aeabi_fsub>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <PID+0x160>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7fe ff0a 	bl	8000d34 <__aeabi_fmul>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <PID+0x150>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe ffb6 	bl	8000e9c <__aeabi_fdiv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <PID+0x164>)
 8001f36:	601a      	str	r2, [r3, #0]
		Out = P_part + I_part + D_part ;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <PID+0x148>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <PID+0x154>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7fe fdee 	bl	8000b24 <__addsf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <PID+0x164>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f7fe fde6 	bl	8000b24 <__addsf3>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <PID+0x168>)
 8001f5e:	601a      	str	r2, [r3, #0]
		pre_Error = Error;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <PID+0x140>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <PID+0x15c>)
 8001f66:	6013      	str	r3, [r2, #0]
		pre_out = Out;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <PID+0x168>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <PID+0x16c>)
 8001f6e:	6013      	str	r3, [r2, #0]

		Motor1( velocity - round_pid(Out));
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <PID+0x168>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fa4f 	bl	8000418 <__aeabi_f2d>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	f000 f835 	bl	8001ff0 <round_pid>
 8001f86:	4602      	mov	r2, r0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff29 	bl	8001de4 <Motor1>
		Motor2( velocity + round_pid(Out));
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <PID+0x168>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa3e 	bl	8000418 <__aeabi_f2d>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f000 f824 	bl	8001ff0 <round_pid>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff3e 	bl	8001e30 <Motor2>


	 	return Out;
 8001fb4:	bf00      	nop
}
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	2000038c 	.word	0x2000038c
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000528 	.word	0x20000528
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	200002b0 	.word	0x200002b0
 8001fd4:	43960000 	.word	0x43960000
 8001fd8:	2000051c 	.word	0x2000051c
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000270 	.word	0x20000270
 8001fe4:	200001b4 	.word	0x200001b4
 8001fe8:	20000280 	.word	0x20000280
 8001fec:	00000000 	.word	0x00000000

08001ff0 <round_pid>:
int round_pid(double x)
	{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	e9c7 0100 	strd	r0, r1, [r7]
	    if (x < 0.0)
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002006:	f7fe fcd1 	bl	80009ac <__aeabi_dcmplt>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01a      	beq.n	8002046 <round_pid+0x56>
	    	if(x > -500){
 8002010:	a31d      	add	r3, pc, #116	; (adr r3, 8002088 <round_pid+0x98>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800201a:	f7fe fce5 	bl	80009e8 <__aeabi_dcmpgt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <round_pid+0x52>
	        return (int)(x - 0.5);
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <round_pid+0xa0>)
 800202a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202e:	f7fe f893 	bl	8000158 <__aeabi_dsub>
 8002032:	4603      	mov	r3, r0
 8002034:	460c      	mov	r4, r1
 8002036:	4618      	mov	r0, r3
 8002038:	4621      	mov	r1, r4
 800203a:	f7fe fcf5 	bl	8000a28 <__aeabi_d2iz>
 800203e:	4603      	mov	r3, r0
 8002040:	e01c      	b.n	800207c <round_pid+0x8c>
	    	}
	    	else{
	    		return -500;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <round_pid+0xa4>)
 8002044:	e01a      	b.n	800207c <round_pid+0x8c>
	    	}
	    else
	    	if(x < 500){
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <round_pid+0xa8>)
 800204c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002050:	f7fe fcac 	bl	80009ac <__aeabi_dcmplt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00e      	beq.n	8002078 <round_pid+0x88>
		        return (int)(x + 0.5);
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <round_pid+0xa0>)
 8002060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002064:	f7fe f87a 	bl	800015c <__adddf3>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	4618      	mov	r0, r3
 800206e:	4621      	mov	r1, r4
 8002070:	f7fe fcda 	bl	8000a28 <__aeabi_d2iz>
 8002074:	4603      	mov	r3, r0
 8002076:	e001      	b.n	800207c <round_pid+0x8c>
	    	}
	    	else{
	    		return 500;
 8002078:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	    	}
	}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	00000000 	.word	0x00000000
 800208c:	c07f4000 	.word	0xc07f4000
 8002090:	3fe00000 	.word	0x3fe00000
 8002094:	fffffe0c 	.word	0xfffffe0c
 8002098:	407f4000 	.word	0x407f4000

0800209c <HAL_ADC_ConvCpltCallback>:
float set_point = 0;
int velocity = 0;
float yaw, yaw_com, yaw_offset, yaw_gyro = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(hadc->Instance == hadc1.Instance){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConvCpltCallback+0x20>
		value[0] = HAL_ADC_GetValue(&hadc1);
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80020b2:	f000 ffe5 	bl	8003080 <HAL_ADC_GetValue>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80020ba:	601a      	str	r2, [r3, #0]
	}
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000230 	.word	0x20000230
 80020c8:	20000578 	.word	0x20000578
 80020cc:	00000000 	.word	0x00000000

080020d0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	61f8      	str	r0, [r7, #28]


  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d146      	bne.n	8002170 <HAL_TIM_PeriodElapsedCallback+0xa0>
  		   imu_data = process_MPU(0,0);
 80020e2:	4c28      	ldr	r4, [pc, #160]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fa14 	bl	8001518 <process_MPU>
 80020f0:	4625      	mov	r5, r4
 80020f2:	463c      	mov	r4, r7
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020fc:	e885 0003 	stmia.w	r5, {r0, r1}
  	       yaw_gyro += 0.01*imu_data.Gyro_z;
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f987 	bl	8000418 <__aeabi_f2d>
 800210a:	4604      	mov	r4, r0
 800210c:	460d      	mov	r5, r1
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f980 	bl	8000418 <__aeabi_f2d>
 8002118:	a317      	add	r3, pc, #92	; (adr r3, 8002178 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f9d3 	bl	80004c8 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe f817 	bl	800015c <__adddf3>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	f7fe fc9f 	bl	8000a78 <__aeabi_d2f>
 800213a:	4602      	mov	r2, r0
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800213e:	601a      	str	r2, [r3, #0]
  	       if(value[2] >  3500){
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002148:	4293      	cmp	r3, r2
 800214a:	d909      	bls.n	8002160 <HAL_TIM_PeriodElapsedCallback+0x90>
           PID(set_point, yaw_gyro, velocity);
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff fe8f 	bl	8001e7c <PID>
  	       else{
  	    	 PID(set_point, yaw_gyro, 0);
  	       }
    }
  /* USER CODE END Callback 1 */
}
 800215e:	e007      	b.n	8002170 <HAL_TIM_PeriodElapsedCallback+0xa0>
  	    	 PID(set_point, yaw_gyro, 0);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	f7ff fe86 	bl	8001e7c <PID>
}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bdb0      	pop	{r4, r5, r7, pc}
 8002178:	47ae147b 	.word	0x47ae147b
 800217c:	3f847ae1 	.word	0x3f847ae1
 8002180:	40000800 	.word	0x40000800
 8002184:	20000210 	.word	0x20000210
 8002188:	200000ac 	.word	0x200000ac
 800218c:	20000578 	.word	0x20000578
 8002190:	200000a4 	.word	0x200000a4
 8002194:	200000a8 	.word	0x200000a8

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219e:	f000 fd35 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a2:	f000 f83b 	bl	800221c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 fa6f 	bl	8002688 <MX_GPIO_Init>
  MX_DMA_Init();
 80021aa:	f000 fa4f 	bl	800264c <MX_DMA_Init>
  MX_ADC1_Init();
 80021ae:	f000 f891 	bl	80022d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021b2:	f000 f8f9 	bl	80023a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80021b6:	f000 f925 	bl	8002404 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80021ba:	f000 fa1d 	bl	80025f8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80021be:	f000 f9cd 	bl	800255c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 80021c2:	f7fe ff7d 	bl	80010c0 <init_MPU>
  calibration_IMU();
 80021c6:	463b      	mov	r3, r7
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fb71 	bl	80018b0 <calibration_IMU>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80021ce:	2104      	movs	r1, #4
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <main+0x70>)
 80021d2:	f003 fd71 	bl	8005cb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80021d6:	2108      	movs	r1, #8
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <main+0x70>)
 80021da:	f003 fd6d 	bl	8005cb8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80021de:	480b      	ldr	r0, [pc, #44]	; (800220c <main+0x74>)
 80021e0:	f003 fcc0 	bl	8005b64 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, value, 4); // start adc in DMA mode
 80021e4:	2204      	movs	r2, #4
 80021e6:	490a      	ldr	r1, [pc, #40]	; (8002210 <main+0x78>)
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <main+0x7c>)
 80021ea:	f000 fe6b 	bl	8002ec4 <HAL_ADC_Start_DMA>

  velocity = 600;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <main+0x80>)
 80021f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021f4:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 80021f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fa:	f000 fd69 	bl	8002cd0 <HAL_Delay>

  velocity = 0;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <main+0x80>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002204:	e7fe      	b.n	8002204 <main+0x6c>
 8002206:	bf00      	nop
 8002208:	20000314 	.word	0x20000314
 800220c:	200000c8 	.word	0x200000c8
 8002210:	20000578 	.word	0x20000578
 8002214:	20000230 	.word	0x20000230
 8002218:	200000a8 	.word	0x200000a8

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b094      	sub	sp, #80	; 0x50
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	2228      	movs	r2, #40	; 0x28
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fcf2 	bl	8006c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800224c:	2301      	movs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225a:	2301      	movs	r3, #1
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225e:	2302      	movs	r3, #2
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002272:	4618      	mov	r0, r3
 8002274:	f002 ff54 	bl	8005120 <HAL_RCC_OscConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800227e:	f000 fa87 	bl	8002790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002282:	230f      	movs	r3, #15
 8002284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 f9be 	bl	8005620 <HAL_RCC_ClockConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80022aa:	f000 fa71 	bl	8002790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022ae:	2302      	movs	r3, #2
 80022b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fb4c 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022c6:	f000 fa63 	bl	8002790 <Error_Handler>
  }
}
 80022ca:	bf00      	nop
 80022cc:	3750      	adds	r7, #80	; 0x50
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <MX_ADC1_Init+0xcc>)
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <MX_ADC1_Init+0xd0>)
 80022e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <MX_ADC1_Init+0xcc>)
 80022ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <MX_ADC1_Init+0xcc>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <MX_ADC1_Init+0xcc>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002300:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <MX_ADC1_Init+0xcc>)
 800230e:	2204      	movs	r2, #4
 8002310:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002312:	4823      	ldr	r0, [pc, #140]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002314:	f000 fcfe 	bl	8002d14 <HAL_ADC_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800231e:	f000 fa37 	bl	8002790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002322:	2301      	movs	r3, #1
 8002324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002326:	2301      	movs	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800232a:	2307      	movs	r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4619      	mov	r1, r3
 8002332:	481b      	ldr	r0, [pc, #108]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002334:	f000 ff8e 	bl	8003254 <HAL_ADC_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800233e:	f000 fa27 	bl	8002790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002342:	2302      	movs	r3, #2
 8002344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002346:	2302      	movs	r3, #2
 8002348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4814      	ldr	r0, [pc, #80]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002350:	f000 ff80 	bl	8003254 <HAL_ADC_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800235a:	f000 fa19 	bl	8002790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800235e:	2307      	movs	r3, #7
 8002360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002362:	2303      	movs	r3, #3
 8002364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <MX_ADC1_Init+0xcc>)
 800236c:	f000 ff72 	bl	8003254 <HAL_ADC_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002376:	f000 fa0b 	bl	8002790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800237a:	2308      	movs	r3, #8
 800237c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800237e:	2304      	movs	r3, #4
 8002380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_ADC1_Init+0xcc>)
 8002388:	f000 ff64 	bl	8003254 <HAL_ADC_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002392:	f000 f9fd 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000230 	.word	0x20000230
 80023a4:	40012400 	.word	0x40012400

080023a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023ae:	4a13      	ldr	r2, [pc, #76]	; (80023fc <MX_I2C1_Init+0x54>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023b4:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_I2C1_Init+0x58>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MX_I2C1_Init+0x50>)
 80023e6:	f001 fdb1 	bl	8003f4c <HAL_I2C_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023f0:	f000 f9ce 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000160 	.word	0x20000160
 80023fc:	40005400 	.word	0x40005400
 8002400:	000186a0 	.word	0x000186a0

08002404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b096      	sub	sp, #88	; 0x58
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2220      	movs	r2, #32
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fbe9 	bl	8006c14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <MX_TIM1_Init+0x150>)
 8002444:	4a44      	ldr	r2, [pc, #272]	; (8002558 <MX_TIM1_Init+0x154>)
 8002446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <MX_TIM1_Init+0x150>)
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <MX_TIM1_Init+0x150>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <MX_TIM1_Init+0x150>)
 8002456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800245a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <MX_TIM1_Init+0x150>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <MX_TIM1_Init+0x150>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <MX_TIM1_Init+0x150>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800246e:	4839      	ldr	r0, [pc, #228]	; (8002554 <MX_TIM1_Init+0x150>)
 8002470:	f003 fb28 	bl	8005ac4 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800247a:	f000 f989 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002488:	4619      	mov	r1, r3
 800248a:	4832      	ldr	r0, [pc, #200]	; (8002554 <MX_TIM1_Init+0x150>)
 800248c:	f003 fe7c 	bl	8006188 <HAL_TIM_ConfigClockSource>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002496:	f000 f97b 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800249a:	482e      	ldr	r0, [pc, #184]	; (8002554 <MX_TIM1_Init+0x150>)
 800249c:	f003 fbb4 	bl	8005c08 <HAL_TIM_PWM_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024a6:	f000 f973 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024b6:	4619      	mov	r1, r3
 80024b8:	4826      	ldr	r0, [pc, #152]	; (8002554 <MX_TIM1_Init+0x150>)
 80024ba:	f004 f9e5 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024c4:	f000 f964 	bl	8002790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c8:	2360      	movs	r3, #96	; 0x60
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	2204      	movs	r2, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4819      	ldr	r0, [pc, #100]	; (8002554 <MX_TIM1_Init+0x150>)
 80024ee:	f003 fd8d 	bl	800600c <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80024f8:	f000 f94a 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002500:	2208      	movs	r2, #8
 8002502:	4619      	mov	r1, r3
 8002504:	4813      	ldr	r0, [pc, #76]	; (8002554 <MX_TIM1_Init+0x150>)
 8002506:	f003 fd81 	bl	800600c <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002510:	f000 f93e 	bl	8002790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM1_Init+0x150>)
 8002538:	f004 fa04 	bl	8006944 <HAL_TIMEx_ConfigBreakDeadTime>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002542:	f000 f925 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM1_Init+0x150>)
 8002548:	f000 fa6c 	bl	8002a24 <HAL_TIM_MspPostInit>

}
 800254c:	bf00      	nop
 800254e:	3758      	adds	r7, #88	; 0x58
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000314 	.word	0x20000314
 8002558:	40012c00 	.word	0x40012c00

0800255c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	463b      	mov	r3, r7
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <MX_TIM4_Init+0x94>)
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <MX_TIM4_Init+0x98>)
 800257c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002580:	2247      	movs	r2, #71	; 0x47
 8002582:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <MX_TIM4_Init+0x94>)
 800258c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002590:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <MX_TIM4_Init+0x94>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_TIM4_Init+0x94>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025a0:	f003 fa90 	bl	8005ac4 <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025aa:	f000 f8f1 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4619      	mov	r1, r3
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025bc:	f003 fde4 	bl	8006188 <HAL_TIM_ConfigClockSource>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f000 f8e3 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025d2:	463b      	mov	r3, r7
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <MX_TIM4_Init+0x94>)
 80025d8:	f004 f956 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80025e2:	f000 f8d5 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200000c8 	.word	0x200000c8
 80025f4:	40000800 	.word	0x40000800

080025f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_USART3_UART_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART3_UART_Init+0x4c>)
 8002630:	f004 f9eb 	bl	8006a0a <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800263a:	f000 f8a9 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000114 	.word	0x20000114
 8002648:	40004800 	.word	0x40004800

0800264c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_DMA_Init+0x38>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <MX_DMA_Init+0x38>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6153      	str	r3, [r2, #20]
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_DMA_Init+0x38>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	200b      	movs	r0, #11
 8002670:	f001 f8bb 	bl	80037ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002674:	200b      	movs	r0, #11
 8002676:	f001 f8d4 	bl	8003822 <HAL_NVIC_EnableIRQ>

}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269c:	4b38      	ldr	r3, [pc, #224]	; (8002780 <MX_GPIO_Init+0xf8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a37      	ldr	r2, [pc, #220]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a31      	ldr	r2, [pc, #196]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026ba:	f043 0320 	orr.w	r3, r3, #32
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026ea:	f043 0308 	orr.w	r3, r3, #8
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <MX_GPIO_Init+0xf8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002702:	4820      	ldr	r0, [pc, #128]	; (8002784 <MX_GPIO_Init+0xfc>)
 8002704:	f001 fbf0 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 8002708:	2200      	movs	r2, #0
 800270a:	f640 1149 	movw	r1, #2377	; 0x949
 800270e:	481e      	ldr	r0, [pc, #120]	; (8002788 <MX_GPIO_Init+0x100>)
 8002710:	f001 fbea 	bl	8003ee8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	2102      	movs	r1, #2
 8002718:	481c      	ldr	r0, [pc, #112]	; (800278c <MX_GPIO_Init+0x104>)
 800271a:	f001 fbe5 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2302      	movs	r3, #2
 800272e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	4813      	ldr	r0, [pc, #76]	; (8002784 <MX_GPIO_Init+0xfc>)
 8002738:	f001 fa7c 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA6 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800273c:	f640 1349 	movw	r3, #2377	; 0x949
 8002740:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2302      	movs	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	480c      	ldr	r0, [pc, #48]	; (8002788 <MX_GPIO_Init+0x100>)
 8002756:	f001 fa6d 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2302      	movs	r3, #2
 8002768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4619      	mov	r1, r3
 8002770:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_GPIO_Init+0x104>)
 8002772:	f001 fa5f 	bl	8003c34 <HAL_GPIO_Init>

}
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40011000 	.word	0x40011000
 8002788:	40010800 	.word	0x40010800
 800278c:	40010c00 	.word	0x40010c00

08002790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_MspInit+0x5c>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_MspInit+0x5c>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6193      	str	r3, [r2, #24]
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_MspInit+0x5c>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_MspInit+0x5c>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_MspInit+0x5c>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_MspInit+0x5c>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_MspInit+0x60>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_MspInit+0x60>)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000

08002800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0318 	add.w	r3, r7, #24
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <HAL_ADC_MspInit+0xf8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d167      	bne.n	80028f0 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 8002826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_ADC_MspInit+0xfc>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002868:	2386      	movs	r3, #134	; 0x86
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286c:	2303      	movs	r3, #3
 800286e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	4619      	mov	r1, r3
 8002876:	4822      	ldr	r0, [pc, #136]	; (8002900 <HAL_ADC_MspInit+0x100>)
 8002878:	f001 f9dc 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800287c:	2301      	movs	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002880:	2303      	movs	r3, #3
 8002882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0318 	add.w	r3, r7, #24
 8002888:	4619      	mov	r1, r3
 800288a:	481e      	ldr	r0, [pc, #120]	; (8002904 <HAL_ADC_MspInit+0x104>)
 800288c:	f001 f9d2 	bl	8003c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_ADC_MspInit+0x108>)
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_ADC_MspInit+0x10c>)
 8002894:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_ADC_MspInit+0x108>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_ADC_MspInit+0x108>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028ba:	2220      	movs	r2, #32
 80028bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c4:	4810      	ldr	r0, [pc, #64]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028c6:	f000 ffc7 	bl	8003858 <HAL_DMA_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80028d0:	f7ff ff5e 	bl	8002790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028d8:	621a      	str	r2, [r3, #32]
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_ADC_MspInit+0x108>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	2012      	movs	r0, #18
 80028e6:	f000 ff80 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028ea:	2012      	movs	r0, #18
 80028ec:	f000 ff99 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012400 	.word	0x40012400
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010800 	.word	0x40010800
 8002904:	40010c00 	.word	0x40010c00
 8002908:	200002b4 	.word	0x200002b4
 800290c:	40020008 	.word	0x40020008

08002910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_I2C_MspInit+0x90>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d132      	bne.n	8002996 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002948:	f44f 7340 	mov.w	r3, #768	; 0x300
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800294e:	2312      	movs	r3, #18
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4812      	ldr	r0, [pc, #72]	; (80029a8 <HAL_I2C_MspInit+0x98>)
 800295e:	f001 f969 	bl	8003c34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_I2C_MspInit+0x9c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_I2C_MspInit+0x9c>)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 8002984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_I2C_MspInit+0x94>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40005400 	.word	0x40005400
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010c00 	.word	0x40010c00
 80029ac:	40010000 	.word	0x40010000

080029b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_TIM_Base_MspInit+0x68>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10c      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029cc:	6193      	str	r3, [r2, #24]
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029da:	e018      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <HAL_TIM_Base_MspInit+0x70>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	201e      	movs	r0, #30
 8002a04:	f000 fef1 	bl	80037ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a08:	201e      	movs	r0, #30
 8002a0a:	f000 ff0a 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_TIM_MspPostInit+0x5c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d118      	bne.n	8002a76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_TIM_MspPostInit+0x60>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_TIM_MspPostInit+0x60>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_TIM_MspPostInit+0x60>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_TIM_MspPostInit+0x64>)
 8002a72:	f001 f8df 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010800 	.word	0x40010800

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_UART_MspInit+0x8c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d131      	bne.n	8002b10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab6:	61d3      	str	r3, [r2, #28]
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6193      	str	r3, [r2, #24]
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_UART_MspInit+0x90>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4619      	mov	r1, r3
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <HAL_UART_MspInit+0x94>)
 8002af2:	f001 f89f 	bl	8003c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <HAL_UART_MspInit+0x94>)
 8002b0c:	f001 f892 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010c00 	.word	0x40010c00

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <HardFault_Handler+0x4>

08002b36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <MemManage_Handler+0x4>

08002b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <BusFault_Handler+0x4>

08002b42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <UsageFault_Handler+0x4>

08002b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b70:	f000 f892 	bl	8002c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <DMA1_Channel1_IRQHandler+0x10>)
 8002b7e:	f000 ff25 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200002b4 	.word	0x200002b4

08002b8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <ADC1_2_IRQHandler+0x10>)
 8002b92:	f000 fa81 	bl	8003098 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000230 	.word	0x20000230

08002ba0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM4_IRQHandler+0x10>)
 8002ba6:	f003 f929 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200000c8 	.word	0x200000c8

08002bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002bc2:	e003      	b.n	8002bcc <LoopCopyDataInit>

08002bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002bca:	3104      	adds	r1, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002bcc:	480a      	ldr	r0, [pc, #40]	; (8002bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bd4:	d3f6      	bcc.n	8002bc4 <CopyDataInit>
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bd8:	e002      	b.n	8002be0 <LoopFillZerobss>

08002bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bdc:	f842 3b04 	str.w	r3, [r2], #4

08002be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002be4:	d3f9      	bcc.n	8002bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002be6:	f7ff ffe5 	bl	8002bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bea:	f003 ffef 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bee:	f7ff fad3 	bl	8002198 <main>
  bx lr
 8002bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8002bf4:	08006e94 	.word	0x08006e94
  ldr r0, =_sdata
 8002bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bfc:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8002c00:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002c04:	20000594 	.word	0x20000594

08002c08 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <CAN1_RX1_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x28>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x28>)
 8002c16:	f043 0310 	orr.w	r3, r3, #16
 8002c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 fdd9 	bl	80037d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fdb8 	bl	800279c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fdf1 	bl	800383e <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 fdb9 	bl	80037ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000010 	.word	0x20000010
 8002c90:	20000018 	.word	0x20000018
 8002c94:	20000014 	.word	0x20000014

08002c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_IncTick+0x1c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_IncTick+0x20>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_IncTick+0x20>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	20000590 	.word	0x20000590

08002cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <HAL_GetTick+0x10>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000590 	.word	0x20000590

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_Delay+0x40>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffe0 	bl	8002cbc <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000018 	.word	0x20000018

08002d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0be      	b.n	8002eb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fd54 	bl	8002800 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fbc5 	bl	80034e8 <ADC_ConversionStop_Disable>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8099 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8095 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d80:	f023 0302 	bic.w	r3, r3, #2
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7b1b      	ldrb	r3, [r3, #12]
 8002d9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d003      	beq.n	8002db6 <HAL_ADC_Init+0xa2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_ADC_Init+0xa8>
 8002db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dba:	e000      	b.n	8002dbe <HAL_ADC_Init+0xaa>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7d1b      	ldrb	r3, [r3, #20]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d119      	bne.n	8002e00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7b1b      	ldrb	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	035a      	lsls	r2, r3, #13
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e00b      	b.n	8002e00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_ADC_Init+0x1a8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e30:	d003      	beq.n	8002e3a <HAL_ADC_Init+0x126>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d104      	bne.n	8002e44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_ADC_Init+0x1ac>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e7e:	e018      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f023 0312 	bic.w	r3, r3, #18
 8002e88:	f043 0210 	orr.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	ffe1f7fd 	.word	0xffe1f7fd
 8002ec0:	ff1f0efe 	.word	0xff1f0efe

08002ec4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a64      	ldr	r2, [pc, #400]	; (800306c <HAL_ADC_Start_DMA+0x1a8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_Start_DMA+0x24>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a63      	ldr	r2, [pc, #396]	; (8003070 <HAL_ADC_Start_DMA+0x1ac>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x32>
 8002ee8:	4b60      	ldr	r3, [pc, #384]	; (800306c <HAL_ADC_Start_DMA+0x1a8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 80b3 	bne.w	800305c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_Start_DMA+0x40>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0ae      	b.n	8003062 <HAL_ADC_Start_DMA+0x19e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fa99 	bl	8003444 <ADC_Enable>
 8002f12:	4603      	mov	r3, r0
 8002f14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 809a 	bne.w	8003052 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4e      	ldr	r2, [pc, #312]	; (8003070 <HAL_ADC_Start_DMA+0x1ac>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_Start_DMA+0x84>
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_ADC_Start_DMA+0x1a8>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d115      	bne.n	8002f74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d026      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f72:	e01d      	b.n	8002fb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_ADC_Start_DMA+0x1a8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_Start_DMA+0xd0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_ADC_Start_DMA+0x1ac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10d      	bne.n	8002fb0 <HAL_ADC_Start_DMA+0xec>
 8002f94:	4b35      	ldr	r3, [pc, #212]	; (800306c <HAL_ADC_Start_DMA+0x1a8>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f023 0206 	bic.w	r2, r3, #6
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <HAL_ADC_Start_DMA+0x1b0>)
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_ADC_Start_DMA+0x1b4>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_ADC_Start_DMA+0x1b8>)
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a18      	ldr	r0, [r3, #32]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	334c      	adds	r3, #76	; 0x4c
 8003014:	4619      	mov	r1, r3
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f000 fc77 	bl	800390c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003028:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800302c:	d108      	bne.n	8003040 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800303c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800303e:	e00f      	b.n	8003060 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800304e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003050:	e006      	b.n	8003060 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800305a:	e001      	b.n	8003060 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40012400 	.word	0x40012400
 8003070:	40012800 	.word	0x40012800
 8003074:	0800355d 	.word	0x0800355d
 8003078:	080035d9 	.word	0x080035d9
 800307c:	080035f5 	.word	0x080035f5

08003080 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d140      	bne.n	8003130 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d139      	bne.n	8003130 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030e2:	d11d      	bne.n	8003120 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d119      	bne.n	8003120 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0220 	bic.w	r2, r2, #32
 80030fa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe ffbb 	bl	800209c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0212 	mvn.w	r2, #18
 800312e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d14f      	bne.n	80031de <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d148      	bne.n	80031de <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800316e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003172:	d012      	beq.n	800319a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800317e:	2b00      	cmp	r3, #0
 8003180:	d125      	bne.n	80031ce <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800318c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003190:	d11d      	bne.n	80031ce <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa2a 	bl	8003628 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 020c 	mvn.w	r2, #12
 80031dc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d114      	bne.n	8003216 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10d      	bne.n	8003216 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f812 	bl	8003230 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0201 	mvn.w	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x20>
 8003270:	2302      	movs	r3, #2
 8003272:	e0dc      	b.n	800342e <HAL_ADC_ConfigChannel+0x1da>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d81c      	bhi.n	80032be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	3b05      	subs	r3, #5
 8003296:	221f      	movs	r2, #31
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	4019      	ands	r1, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b05      	subs	r3, #5
 80032b0:	fa00 f203 	lsl.w	r2, r0, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34
 80032bc:	e03c      	b.n	8003338 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d81c      	bhi.n	8003300 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	3b23      	subs	r3, #35	; 0x23
 80032d8:	221f      	movs	r2, #31
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	4019      	ands	r1, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3b23      	subs	r3, #35	; 0x23
 80032f2:	fa00 f203 	lsl.w	r2, r0, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
 80032fe:	e01b      	b.n	8003338 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b41      	subs	r3, #65	; 0x41
 8003312:	221f      	movs	r2, #31
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	4019      	ands	r1, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	3b41      	subs	r3, #65	; 0x41
 800332c:	fa00 f203 	lsl.w	r2, r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b09      	cmp	r3, #9
 800333e:	d91c      	bls.n	800337a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	2207      	movs	r2, #7
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	4019      	ands	r1, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6898      	ldr	r0, [r3, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	3b1e      	subs	r3, #30
 800336c:	fa00 f203 	lsl.w	r2, r0, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e019      	b.n	80033ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6919      	ldr	r1, [r3, #16]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	2207      	movs	r2, #7
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	4019      	ands	r1, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6898      	ldr	r0, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	fa00 f203 	lsl.w	r2, r0, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d003      	beq.n	80033be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ba:	2b11      	cmp	r3, #17
 80033bc:	d132      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_ADC_ConfigChannel+0x1e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d125      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d126      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d11a      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_ADC_ConfigChannel+0x1e8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <HAL_ADC_ConfigChannel+0x1ec>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0c9a      	lsrs	r2, r3, #18
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003404:	e002      	b.n	800340c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3b01      	subs	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f9      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x1b2>
 8003412:	e007      	b.n	8003424 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012400 	.word	0x40012400
 800343c:	20000010 	.word	0x20000010
 8003440:	431bde83 	.word	0x431bde83

08003444 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d039      	beq.n	80034d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <ADC_Enable+0x9c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <ADC_Enable+0xa0>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	0c9b      	lsrs	r3, r3, #18
 800347e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003480:	e002      	b.n	8003488 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3b01      	subs	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f9      	bne.n	8003482 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800348e:	f7ff fc15 	bl	8002cbc <HAL_GetTick>
 8003492:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003494:	e018      	b.n	80034c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003496:	f7ff fc11 	bl	8002cbc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d911      	bls.n	80034c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d1df      	bne.n	8003496 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000010 	.word	0x20000010
 80034e4:	431bde83 	.word	0x431bde83

080034e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d127      	bne.n	8003552 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003512:	f7ff fbd3 	bl	8002cbc <HAL_GetTick>
 8003516:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003518:	e014      	b.n	8003544 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351a:	f7ff fbcf 	bl	8002cbc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d90d      	bls.n	8003544 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f043 0210 	orr.w	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d0e3      	beq.n	800351a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d127      	bne.n	80035c6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800358c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003590:	d115      	bne.n	80035be <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003596:	2b00      	cmp	r3, #0
 8003598:	d111      	bne.n	80035be <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7fe fd6c 	bl	800209c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80035c4:	e004      	b.n	80035d0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff fe19 	bl	800321e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff fe11 	bl	8003242 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003658:	4013      	ands	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <__NVIC_GetPriorityGrouping+0x18>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0307 	and.w	r3, r3, #7
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0b      	blt.n	80036ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4906      	ldr	r1, [pc, #24]	; (80036d4 <__NVIC_EnableIRQ+0x34>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2001      	movs	r0, #1
 80036c2:	fa00 f202 	lsl.w	r2, r0, r2
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
         );
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d301      	bcc.n	80037a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <SysTick_Config+0x40>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ae:	210f      	movs	r1, #15
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f7ff ff90 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <SysTick_Config+0x40>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <SysTick_Config+0x40>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff2d 	bl	800363c <__NVIC_SetPriorityGrouping>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037fc:	f7ff ff42 	bl	8003684 <__NVIC_GetPriorityGrouping>
 8003800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff90 	bl	800372c <NVIC_EncodePriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5f 	bl	80036d8 <__NVIC_SetPriority>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff35 	bl	80036a0 <__NVIC_EnableIRQ>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa2 	bl	8003790 <SysTick_Config>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e043      	b.n	80038f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_DMA_Init+0xa8>)
 8003876:	4413      	add	r3, r2
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <HAL_DMA_Init+0xac>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	009a      	lsls	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_DMA_Init+0xb0>)
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	bffdfff8 	.word	0xbffdfff8
 8003904:	cccccccd 	.word	0xcccccccd
 8003908:	40020000 	.word	0x40020000

0800390c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_DMA_Start_IT+0x20>
 8003928:	2302      	movs	r3, #2
 800392a:	e04a      	b.n	80039c2 <HAL_DMA_Start_IT+0xb6>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800393a:	2b01      	cmp	r3, #1
 800393c:	d13a      	bne.n	80039b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f938 	bl	8003bd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 020e 	orr.w	r2, r2, #14
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e00f      	b.n	80039a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0204 	bic.w	r2, r2, #4
 8003990:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 020a 	orr.w	r2, r2, #10
 80039a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e005      	b.n	80039c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d04f      	beq.n	8003a94 <HAL_DMA_IRQHandler+0xc8>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a66      	ldr	r2, [pc, #408]	; (8003bbc <HAL_DMA_IRQHandler+0x1f0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d029      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xae>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a65      	ldr	r2, [pc, #404]	; (8003bc0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xaa>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a63      	ldr	r2, [pc, #396]	; (8003bc4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01a      	beq.n	8003a70 <HAL_DMA_IRQHandler+0xa4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a62      	ldr	r2, [pc, #392]	; (8003bc8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d012      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x9e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_DMA_IRQHandler+0x200>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x98>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5f      	ldr	r2, [pc, #380]	; (8003bd0 <HAL_DMA_IRQHandler+0x204>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x92>
 8003a58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a5c:	e00e      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a62:	e00b      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a68:	e008      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a6e:	e005      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a74:	e002      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a76:	2340      	movs	r3, #64	; 0x40
 8003a78:	e000      	b.n	8003a7c <HAL_DMA_IRQHandler+0xb0>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	4a55      	ldr	r2, [pc, #340]	; (8003bd4 <HAL_DMA_IRQHandler+0x208>)
 8003a7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8094 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	e08e      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2202      	movs	r2, #2
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d056      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x186>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d051      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10b      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020a 	bic.w	r2, r2, #10
 8003aca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <HAL_DMA_IRQHandler+0x1f0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d029      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x166>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_DMA_IRQHandler+0x1f4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x162>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a35      	ldr	r2, [pc, #212]	; (8003bc4 <HAL_DMA_IRQHandler+0x1f8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01a      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x15c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <HAL_DMA_IRQHandler+0x1fc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d012      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x156>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_DMA_IRQHandler+0x200>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x150>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_DMA_IRQHandler+0x204>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d102      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x14a>
 8003b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b14:	e00e      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1a:	e00b      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b20:	e008      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b26:	e005      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b2c:	e002      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b2e:	2320      	movs	r3, #32
 8003b30:	e000      	b.n	8003b34 <HAL_DMA_IRQHandler+0x168>
 8003b32:	2302      	movs	r3, #2
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_DMA_IRQHandler+0x208>)
 8003b36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d034      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b50:	e02f      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2208      	movs	r2, #8
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d028      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x1e8>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 020e 	bic.w	r2, r2, #14
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
    }
  }
  return;
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
}
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40020008 	.word	0x40020008
 8003bc0:	4002001c 	.word	0x4002001c
 8003bc4:	40020030 	.word	0x40020030
 8003bc8:	40020044 	.word	0x40020044
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	4002006c 	.word	0x4002006c
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d108      	bne.n	8003c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c16:	e007      	b.n	8003c28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b08b      	sub	sp, #44	; 0x2c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c46:	e127      	b.n	8003e98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c48:	2201      	movs	r2, #1
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f040 8116 	bne.w	8003e92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b12      	cmp	r3, #18
 8003c6c:	d034      	beq.n	8003cd8 <HAL_GPIO_Init+0xa4>
 8003c6e:	2b12      	cmp	r3, #18
 8003c70:	d80d      	bhi.n	8003c8e <HAL_GPIO_Init+0x5a>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d02b      	beq.n	8003cce <HAL_GPIO_Init+0x9a>
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d804      	bhi.n	8003c84 <HAL_GPIO_Init+0x50>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d031      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d01c      	beq.n	8003cbc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c82:	e048      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d043      	beq.n	8003d10 <HAL_GPIO_Init+0xdc>
 8003c88:	2b11      	cmp	r3, #17
 8003c8a:	d01b      	beq.n	8003cc4 <HAL_GPIO_Init+0x90>
          break;
 8003c8c:	e043      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c8e:	4a89      	ldr	r2, [pc, #548]	; (8003eb4 <HAL_GPIO_Init+0x280>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d026      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
 8003c94:	4a87      	ldr	r2, [pc, #540]	; (8003eb4 <HAL_GPIO_Init+0x280>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d806      	bhi.n	8003ca8 <HAL_GPIO_Init+0x74>
 8003c9a:	4a87      	ldr	r2, [pc, #540]	; (8003eb8 <HAL_GPIO_Init+0x284>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d020      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
 8003ca0:	4a86      	ldr	r2, [pc, #536]	; (8003ebc <HAL_GPIO_Init+0x288>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
          break;
 8003ca6:	e036      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ca8:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_GPIO_Init+0x28c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
 8003cae:	4a85      	ldr	r2, [pc, #532]	; (8003ec4 <HAL_GPIO_Init+0x290>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d016      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
 8003cb4:	4a84      	ldr	r2, [pc, #528]	; (8003ec8 <HAL_GPIO_Init+0x294>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0xae>
          break;
 8003cba:	e02c      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	623b      	str	r3, [r7, #32]
          break;
 8003cc2:	e028      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	623b      	str	r3, [r7, #32]
          break;
 8003ccc:	e023      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	623b      	str	r3, [r7, #32]
          break;
 8003cd6:	e01e      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	623b      	str	r3, [r7, #32]
          break;
 8003ce0:	e019      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cea:	2304      	movs	r3, #4
 8003cec:	623b      	str	r3, [r7, #32]
          break;
 8003cee:	e012      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	611a      	str	r2, [r3, #16]
          break;
 8003d02:	e008      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d04:	2308      	movs	r3, #8
 8003d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	615a      	str	r2, [r3, #20]
          break;
 8003d0e:	e002      	b.n	8003d16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2bff      	cmp	r3, #255	; 0xff
 8003d1a:	d801      	bhi.n	8003d20 <HAL_GPIO_Init+0xec>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	e001      	b.n	8003d24 <HAL_GPIO_Init+0xf0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d802      	bhi.n	8003d32 <HAL_GPIO_Init+0xfe>
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x104>
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	3b08      	subs	r3, #8
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	210f      	movs	r1, #15
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	401a      	ands	r2, r3
 8003d4a:	6a39      	ldr	r1, [r7, #32]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	431a      	orrs	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8096 	beq.w	8003e92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d66:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_GPIO_Init+0x298>)
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <HAL_GPIO_Init+0x298>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6193      	str	r3, [r2, #24]
 8003d72:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_GPIO_Init+0x298>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d7e:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <HAL_GPIO_Init+0x29c>)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4b      	ldr	r2, [pc, #300]	; (8003ed4 <HAL_GPIO_Init+0x2a0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x19e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4a      	ldr	r2, [pc, #296]	; (8003ed8 <HAL_GPIO_Init+0x2a4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x19a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a49      	ldr	r2, [pc, #292]	; (8003edc <HAL_GPIO_Init+0x2a8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x196>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a48      	ldr	r2, [pc, #288]	; (8003ee0 <HAL_GPIO_Init+0x2ac>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x192>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x1a0>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e004      	b.n	8003dd4 <HAL_GPIO_Init+0x1a0>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x1a0>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x1a0>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	f002 0203 	and.w	r2, r2, #3
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	4093      	lsls	r3, r2
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003de4:	493a      	ldr	r1, [pc, #232]	; (8003ed0 <HAL_GPIO_Init+0x29c>)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4938      	ldr	r1, [pc, #224]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	e006      	b.n	8003e1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e0c:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	4933      	ldr	r1, [pc, #204]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	492e      	ldr	r1, [pc, #184]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	e006      	b.n	8003e42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4929      	ldr	r1, [pc, #164]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e4e:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	4924      	ldr	r1, [pc, #144]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
 8003e5a:	e006      	b.n	8003e6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	491f      	ldr	r1, [pc, #124]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	491a      	ldr	r1, [pc, #104]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60cb      	str	r3, [r1, #12]
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4915      	ldr	r1, [pc, #84]	; (8003ee4 <HAL_GPIO_Init+0x2b0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	3301      	adds	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f aed0 	bne.w	8003c48 <HAL_GPIO_Init+0x14>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	372c      	adds	r7, #44	; 0x2c
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	10210000 	.word	0x10210000
 8003eb8:	10110000 	.word	0x10110000
 8003ebc:	10120000 	.word	0x10120000
 8003ec0:	10310000 	.word	0x10310000
 8003ec4:	10320000 	.word	0x10320000
 8003ec8:	10220000 	.word	0x10220000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	40010c00 	.word	0x40010c00
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f04:	e003      	b.n	8003f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43d9      	mvns	r1, r3
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	400b      	ands	r3, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e11f      	b.n	800419e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fe fccc 	bl	8002910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f001 fc8c 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a7b      	ldr	r2, [pc, #492]	; (80041a8 <HAL_I2C_Init+0x25c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d807      	bhi.n	8003fd0 <HAL_I2C_Init+0x84>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a7a      	ldr	r2, [pc, #488]	; (80041ac <HAL_I2C_Init+0x260>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bf94      	ite	ls
 8003fc8:	2301      	movls	r3, #1
 8003fca:	2300      	movhi	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e006      	b.n	8003fde <HAL_I2C_Init+0x92>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a77      	ldr	r2, [pc, #476]	; (80041b0 <HAL_I2C_Init+0x264>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bf94      	ite	ls
 8003fd8:	2301      	movls	r3, #1
 8003fda:	2300      	movhi	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0db      	b.n	800419e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a72      	ldr	r2, [pc, #456]	; (80041b4 <HAL_I2C_Init+0x268>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9b      	lsrs	r3, r3, #18
 8003ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <HAL_I2C_Init+0x25c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <HAL_I2C_Init+0xd4>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3301      	adds	r3, #1
 800401e:	e009      	b.n	8004034 <HAL_I2C_Init+0xe8>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	4a63      	ldr	r2, [pc, #396]	; (80041b8 <HAL_I2C_Init+0x26c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	430b      	orrs	r3, r1
 800403a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4956      	ldr	r1, [pc, #344]	; (80041a8 <HAL_I2C_Init+0x25c>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d80d      	bhi.n	8004070 <HAL_I2C_Init+0x124>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e59      	subs	r1, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	bf38      	it	cc
 800406c:	2304      	movcc	r3, #4
 800406e:	e04f      	b.n	8004110 <HAL_I2C_Init+0x1c4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d111      	bne.n	800409c <HAL_I2C_Init+0x150>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e58      	subs	r0, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e012      	b.n	80040c2 <HAL_I2C_Init+0x176>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e58      	subs	r0, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	0099      	lsls	r1, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Init+0x17e>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e022      	b.n	8004110 <HAL_I2C_Init+0x1c4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10e      	bne.n	80040f0 <HAL_I2C_Init+0x1a4>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e58      	subs	r0, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	440b      	add	r3, r1
 80040e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Init+0x1c4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	0099      	lsls	r1, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	6809      	ldr	r1, [r1, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800413e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6911      	ldr	r1, [r2, #16]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	430b      	orrs	r3, r1
 8004152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	000186a0 	.word	0x000186a0
 80041ac:	001e847f 	.word	0x001e847f
 80041b0:	003d08ff 	.word	0x003d08ff
 80041b4:	431bde83 	.word	0x431bde83
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	461a      	mov	r2, r3
 80041c8:	460b      	mov	r3, r1
 80041ca:	817b      	strh	r3, [r7, #10]
 80041cc:	4613      	mov	r3, r2
 80041ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7fe fd74 	bl	8002cbc <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 80e0 	bne.w	80043a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2319      	movs	r3, #25
 80041ea:	2201      	movs	r2, #1
 80041ec:	4970      	ldr	r1, [pc, #448]	; (80043b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fdba 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0d3      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_I2C_Master_Transmit+0x50>
 8004208:	2302      	movs	r3, #2
 800420a:	e0cc      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d007      	beq.n	8004232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2221      	movs	r2, #33	; 0x21
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2210      	movs	r2, #16
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	893a      	ldrh	r2, [r7, #8]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004274:	8979      	ldrh	r1, [r7, #10]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fc24 	bl	8004ac8 <I2C_MasterRequestWrite>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e08d      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042a0:	e066      	b.n	8004370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fe34 	bl	8004f14 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e06b      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_I2C_Master_Transmit+0x188>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fe24 	bl	8004f96 <I2C_WaitOnBTFFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b04      	cmp	r3, #4
 800435a:	d107      	bne.n	800436c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e01a      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d194      	bne.n	80042a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	00100002 	.word	0x00100002
 80043b4:	ffff0000 	.word	0xffff0000

080043b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
 80043c8:	4613      	mov	r3, r2
 80043ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d0:	f7fe fc74 	bl	8002cbc <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b20      	cmp	r3, #32
 80043e0:	f040 8238 	bne.w	8004854 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2319      	movs	r3, #25
 80043ea:	2201      	movs	r2, #1
 80043ec:	497e      	ldr	r1, [pc, #504]	; (80045e8 <HAL_I2C_Master_Receive+0x230>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fcba 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
 80043fc:	e22b      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_I2C_Master_Receive+0x54>
 8004408:	2302      	movs	r3, #2
 800440a:	e224      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d007      	beq.n	8004432 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2222      	movs	r2, #34	; 0x22
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2210      	movs	r2, #16
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	893a      	ldrh	r2, [r7, #8]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a5e      	ldr	r2, [pc, #376]	; (80045ec <HAL_I2C_Master_Receive+0x234>)
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004474:	8979      	ldrh	r1, [r7, #10]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fba6 	bl	8004bcc <I2C_MasterRequestRead>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1e5      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e1b9      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d11d      	bne.n	80044fe <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044d2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044fa:	b662      	cpsie	i
 80044fc:	e197      	b.n	800482e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b02      	cmp	r3, #2
 8004504:	d11d      	bne.n	8004542 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004516:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800453e:	b662      	cpsie	i
 8004540:	e175      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004568:	e161      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	2b03      	cmp	r3, #3
 8004570:	f200 811a 	bhi.w	80047a8 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b01      	cmp	r3, #1
 800457a:	d123      	bne.n	80045c4 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fd49 	bl	8005018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e162      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045c2:	e134      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d150      	bne.n	800466e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	2200      	movs	r2, #0
 80045d4:	4906      	ldr	r1, [pc, #24]	; (80045f0 <HAL_I2C_Master_Receive+0x238>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fbc6 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e137      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
 80045e6:	bf00      	nop
 80045e8:	00100002 	.word	0x00100002
 80045ec:	ffff0000 	.word	0xffff0000
 80045f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045f4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004604:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004638:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800466c:	e0df      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	497a      	ldr	r1, [pc, #488]	; (8004860 <HAL_I2C_Master_Receive+0x4a8>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fb75 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0e6      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004698:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046cc:	4b65      	ldr	r3, [pc, #404]	; (8004864 <HAL_I2C_Master_Receive+0x4ac>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_I2C_Master_Receive+0x4b0>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	0a1a      	lsrs	r2, r3, #8
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00da      	lsls	r2, r3, #3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d117      	bne.n	8004722 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004714:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e099      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d1da      	bne.n	80046e6 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004772:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a6:	e042      	b.n	800482e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fc33 	bl	8005018 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e04c      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d118      	bne.n	800482e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	f47f ae99 	bne.w	800456a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	00010004 	.word	0x00010004
 8004864:	20000010 	.word	0x20000010
 8004868:	14f8b589 	.word	0x14f8b589

0800486c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7fe fa1e 	bl	8002cbc <HAL_GetTick>
 8004880:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004882:	2301      	movs	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	f040 8111 	bne.w	8004ab6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2319      	movs	r3, #25
 800489a:	2201      	movs	r2, #1
 800489c:	4988      	ldr	r1, [pc, #544]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa62 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e104      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_I2C_IsDeviceReady+0x50>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0fd      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d007      	beq.n	80048e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2224      	movs	r2, #36	; 0x24
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a70      	ldr	r2, [pc, #448]	; (8004ac4 <HAL_I2C_IsDeviceReady+0x258>)
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa20 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493c:	d103      	bne.n	8004946 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0b6      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004958:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800495a:	f7fe f9af 	bl	8002cbc <HAL_GetTick>
 800495e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800498e:	e025      	b.n	80049dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fe f994 	bl	8002cbc <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <HAL_I2C_IsDeviceReady+0x13a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	22a0      	movs	r2, #160	; 0xa0
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2ba0      	cmp	r3, #160	; 0xa0
 80049e6:	d005      	beq.n	80049f4 <HAL_I2C_IsDeviceReady+0x188>
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_I2C_IsDeviceReady+0x188>
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0cd      	beq.n	8004990 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d129      	bne.n	8004a5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2319      	movs	r3, #25
 8004a36:	2201      	movs	r2, #1
 8004a38:	4921      	ldr	r1, [pc, #132]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f994 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e036      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e02c      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2319      	movs	r3, #25
 8004a7e:	2201      	movs	r2, #1
 8004a80:	490f      	ldr	r1, [pc, #60]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f970 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e012      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f4ff af32 	bcc.w	8004906 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00100002 	.word	0x00100002
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d006      	beq.n	8004af2 <I2C_MasterRequestWrite+0x2a>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d003      	beq.n	8004af2 <I2C_MasterRequestWrite+0x2a>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af0:	d108      	bne.n	8004b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e00b      	b.n	8004b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b12      	cmp	r3, #18
 8004b0a:	d107      	bne.n	8004b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f91d 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d103      	bne.n	8004b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e035      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b58:	d108      	bne.n	8004b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e01b      	b.n	8004ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	11db      	asrs	r3, r3, #7
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f063 030f 	orn	r3, r3, #15
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <I2C_MasterRequestWrite+0xfc>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f943 	bl	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e010      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <I2C_MasterRequestWrite+0x100>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f933 	bl	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	00010008 	.word	0x00010008
 8004bc8:	00010002 	.word	0x00010002

08004bcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d006      	beq.n	8004c06 <I2C_MasterRequestRead+0x3a>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d003      	beq.n	8004c06 <I2C_MasterRequestRead+0x3a>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c04:	d108      	bne.n	8004c18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e00b      	b.n	8004c30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	2b11      	cmp	r3, #17
 8004c1e:	d107      	bne.n	8004c30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f893 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c56:	d103      	bne.n	8004c60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e079      	b.n	8004d58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6c:	d108      	bne.n	8004c80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]
 8004c7e:	e05f      	b.n	8004d40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c80:	897b      	ldrh	r3, [r7, #10]
 8004c82:	11db      	asrs	r3, r3, #7
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0306 	and.w	r3, r3, #6
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f063 030f 	orn	r3, r3, #15
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4930      	ldr	r1, [pc, #192]	; (8004d60 <I2C_MasterRequestRead+0x194>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8b9 	bl	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e054      	b.n	8004d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4929      	ldr	r1, [pc, #164]	; (8004d64 <I2C_MasterRequestRead+0x198>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f8a9 	bl	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e044      	b.n	8004d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f831 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1a:	d103      	bne.n	8004d24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e017      	b.n	8004d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	11db      	asrs	r3, r3, #7
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0306 	and.w	r3, r3, #6
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f063 030e 	orn	r3, r3, #14
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4907      	ldr	r1, [pc, #28]	; (8004d64 <I2C_MasterRequestRead+0x198>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f865 	bl	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	00010008 	.word	0x00010008
 8004d64:	00010002 	.word	0x00010002

08004d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d78:	e025      	b.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d021      	beq.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fd ff9b 	bl	8002cbc <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d116      	bne.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e023      	b.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10d      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x84>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	e00c      	b.n	8004e06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d0b6      	beq.n	8004d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e24:	e051      	b.n	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d123      	bne.n	8004e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e046      	b.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d021      	beq.n	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fd ff19 	bl	8002cbc <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d116      	bne.n	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e020      	b.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10c      	bne.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	43da      	mvns	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e00b      	b.n	8004f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	43da      	mvns	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d18d      	bne.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f20:	e02d      	b.n	8004f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f8ce 	bl	80050c4 <I2C_IsAcknowledgeFailed>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02d      	b.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d021      	beq.n	8004f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fd febf 	bl	8002cbc <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d116      	bne.n	8004f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e007      	b.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d1ca      	bne.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fa2:	e02d      	b.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f88d 	bl	80050c4 <I2C_IsAcknowledgeFailed>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e02d      	b.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d021      	beq.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fd fe7e 	bl	8002cbc <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d1ca      	bne.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005024:	e042      	b.n	80050ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d119      	bne.n	8005068 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e029      	b.n	80050bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005068:	f7fd fe28 	bl	8002cbc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d116      	bne.n	80050ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e007      	b.n	80050bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d1b5      	bne.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050da:	d11b      	bne.n	8005114 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e26c      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8087 	beq.w	800524e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005140:	4b92      	ldr	r3, [pc, #584]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b04      	cmp	r3, #4
 800514a:	d00c      	beq.n	8005166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800514c:	4b8f      	ldr	r3, [pc, #572]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b08      	cmp	r3, #8
 8005156:	d112      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
 8005158:	4b8c      	ldr	r3, [pc, #560]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d10b      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005166:	4b89      	ldr	r3, [pc, #548]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d06c      	beq.n	800524c <HAL_RCC_OscConfig+0x12c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d168      	bne.n	800524c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e246      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x76>
 8005188:	4b80      	ldr	r3, [pc, #512]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7f      	ldr	r2, [pc, #508]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e02e      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x98>
 800519e:	4b7b      	ldr	r3, [pc, #492]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7a      	ldr	r2, [pc, #488]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b78      	ldr	r3, [pc, #480]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a77      	ldr	r2, [pc, #476]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e01d      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0xbc>
 80051c2:	4b72      	ldr	r3, [pc, #456]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a71      	ldr	r2, [pc, #452]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b6f      	ldr	r3, [pc, #444]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051dc:	4b6b      	ldr	r3, [pc, #428]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6a      	ldr	r2, [pc, #424]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b68      	ldr	r3, [pc, #416]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a67      	ldr	r2, [pc, #412]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fd fd5e 	bl	8002cbc <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005204:	f7fd fd5a 	bl	8002cbc <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e1fa      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b5d      	ldr	r3, [pc, #372]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0xe4>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fd fd4a 	bl	8002cbc <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800522c:	f7fd fd46 	bl	8002cbc <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e1e6      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523e:	4b53      	ldr	r3, [pc, #332]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x10c>
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d063      	beq.n	8005322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800525a:	4b4c      	ldr	r3, [pc, #304]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005266:	4b49      	ldr	r3, [pc, #292]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b08      	cmp	r3, #8
 8005270:	d11c      	bne.n	80052ac <HAL_RCC_OscConfig+0x18c>
 8005272:	4b46      	ldr	r3, [pc, #280]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d116      	bne.n	80052ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527e:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCC_OscConfig+0x176>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e1ba      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4939      	ldr	r1, [pc, #228]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	e03a      	b.n	8005322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b4:	4b36      	ldr	r3, [pc, #216]	; (8005390 <HAL_RCC_OscConfig+0x270>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd fcff 	bl	8002cbc <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c2:	f7fd fcfb 	bl	8002cbc <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e19b      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4927      	ldr	r1, [pc, #156]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]
 80052f4:	e015      	b.n	8005322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f6:	4b26      	ldr	r3, [pc, #152]	; (8005390 <HAL_RCC_OscConfig+0x270>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fd fcde 	bl	8002cbc <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005304:	f7fd fcda 	bl	8002cbc <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e17a      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005316:	4b1d      	ldr	r3, [pc, #116]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03a      	beq.n	80053a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d019      	beq.n	800536a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <HAL_RCC_OscConfig+0x274>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533c:	f7fd fcbe 	bl	8002cbc <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005344:	f7fd fcba 	bl	8002cbc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e15a      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <HAL_RCC_OscConfig+0x26c>)
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005362:	2001      	movs	r0, #1
 8005364:	f000 fada 	bl	800591c <RCC_Delay>
 8005368:	e01c      	b.n	80053a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_RCC_OscConfig+0x274>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fd fca4 	bl	8002cbc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005376:	e00f      	b.n	8005398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005378:	f7fd fca0 	bl	8002cbc <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d908      	bls.n	8005398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e140      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	42420000 	.word	0x42420000
 8005394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005398:	4b9e      	ldr	r3, [pc, #632]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e9      	bne.n	8005378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a6 	beq.w	80054fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b6:	4b97      	ldr	r3, [pc, #604]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c2:	4b94      	ldr	r3, [pc, #592]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4a93      	ldr	r2, [pc, #588]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053cc:	61d3      	str	r3, [r2, #28]
 80053ce:	4b91      	ldr	r3, [pc, #580]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	4b8e      	ldr	r3, [pc, #568]	; (8005618 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ea:	4b8b      	ldr	r3, [pc, #556]	; (8005618 <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a8a      	ldr	r2, [pc, #552]	; (8005618 <HAL_RCC_OscConfig+0x4f8>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7fd fc61 	bl	8002cbc <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7fd fc5d 	bl	8002cbc <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	; 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0fd      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	4b81      	ldr	r3, [pc, #516]	; (8005618 <HAL_RCC_OscConfig+0x4f8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x312>
 8005424:	4b7b      	ldr	r3, [pc, #492]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	4a7a      	ldr	r2, [pc, #488]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6213      	str	r3, [r2, #32]
 8005430:	e02d      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x334>
 800543a:	4b76      	ldr	r3, [pc, #472]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a75      	ldr	r2, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	6213      	str	r3, [r2, #32]
 8005446:	4b73      	ldr	r3, [pc, #460]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4a72      	ldr	r2, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	6213      	str	r3, [r2, #32]
 8005452:	e01c      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d10c      	bne.n	8005476 <HAL_RCC_OscConfig+0x356>
 800545c:	4b6d      	ldr	r3, [pc, #436]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4a6c      	ldr	r2, [pc, #432]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6213      	str	r3, [r2, #32]
 8005468:	4b6a      	ldr	r3, [pc, #424]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	4a69      	ldr	r2, [pc, #420]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6213      	str	r3, [r2, #32]
 8005474:	e00b      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005476:	4b67      	ldr	r3, [pc, #412]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4a66      	ldr	r2, [pc, #408]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	6213      	str	r3, [r2, #32]
 8005482:	4b64      	ldr	r3, [pc, #400]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4a63      	ldr	r2, [pc, #396]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fd fc11 	bl	8002cbc <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fd fc0d 	bl	8002cbc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e0ab      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b4:	4b57      	ldr	r3, [pc, #348]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <HAL_RCC_OscConfig+0x37e>
 80054c0:	e014      	b.n	80054ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fd fbfb 	bl	8002cbc <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd fbf7 	bl	8002cbc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e095      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ee      	bne.n	80054ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4b48      	ldr	r3, [pc, #288]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4a47      	ldr	r2, [pc, #284]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8081 	beq.w	800560a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005508:	4b42      	ldr	r3, [pc, #264]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 030c 	and.w	r3, r3, #12
 8005510:	2b08      	cmp	r3, #8
 8005512:	d061      	beq.n	80055d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d146      	bne.n	80055aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551c:	4b3f      	ldr	r3, [pc, #252]	; (800561c <HAL_RCC_OscConfig+0x4fc>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005522:	f7fd fbcb 	bl	8002cbc <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552a:	f7fd fbc7 	bl	8002cbc <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e067      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553c:	4b35      	ldr	r3, [pc, #212]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d108      	bne.n	8005564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	492d      	ldr	r1, [pc, #180]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005560:	4313      	orrs	r3, r2
 8005562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005564:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a19      	ldr	r1, [r3, #32]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	430b      	orrs	r3, r1
 8005576:	4927      	ldr	r1, [pc, #156]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x4fc>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005582:	f7fd fb9b 	bl	8002cbc <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7fd fb97 	bl	8002cbc <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e037      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800559c:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x46a>
 80055a8:	e02f      	b.n	800560a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <HAL_RCC_OscConfig+0x4fc>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fd fb84 	bl	8002cbc <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b8:	f7fd fb80 	bl	8002cbc <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e020      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0x498>
 80055d6:	e018      	b.n	800560a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e013      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_OscConfig+0x4f4>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d106      	bne.n	8005606 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d001      	beq.n	800560a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
 800561c:	42420060 	.word	0x42420060

08005620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0d0      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	4b6a      	ldr	r3, [pc, #424]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d910      	bls.n	8005664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b67      	ldr	r3, [pc, #412]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	4965      	ldr	r1, [pc, #404]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b63      	ldr	r3, [pc, #396]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0b8      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d020      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800567c:	4b59      	ldr	r3, [pc, #356]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a58      	ldr	r2, [pc, #352]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005694:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a52      	ldr	r2, [pc, #328]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800569a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800569e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a0:	4b50      	ldr	r3, [pc, #320]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	494d      	ldr	r1, [pc, #308]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d040      	beq.n	8005740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d107      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	4b47      	ldr	r3, [pc, #284]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d115      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07f      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056de:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e073      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ee:	4b3d      	ldr	r3, [pc, #244]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e06b      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fe:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f023 0203 	bic.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4936      	ldr	r1, [pc, #216]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800570c:	4313      	orrs	r3, r2
 800570e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005710:	f7fd fad4 	bl	8002cbc <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	e00a      	b.n	800572e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005718:	f7fd fad0 	bl	8002cbc <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e053      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 020c 	and.w	r2, r3, #12
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	429a      	cmp	r2, r3
 800573e:	d1eb      	bne.n	8005718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005740:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d210      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 0207 	bic.w	r2, r3, #7
 8005756:	4922      	ldr	r1, [pc, #136]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e032      	b.n	80057d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800577c:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4916      	ldr	r1, [pc, #88]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800578a:	4313      	orrs	r3, r2
 800578c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	490e      	ldr	r1, [pc, #56]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ae:	f000 f821 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 80057b2:	4601      	mov	r1, r0
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c0:	5cd3      	ldrb	r3, [r2, r3]
 80057c2:	fa21 f303 	lsr.w	r3, r1, r3
 80057c6:	4a09      	ldr	r2, [pc, #36]	; (80057ec <HAL_RCC_ClockConfig+0x1cc>)
 80057c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_RCC_ClockConfig+0x1d0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fa32 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40022000 	.word	0x40022000
 80057e4:	40021000 	.word	0x40021000
 80057e8:	08006e6c 	.word	0x08006e6c
 80057ec:	20000010 	.word	0x20000010
 80057f0:	20000014 	.word	0x20000014

080057f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f4:	b490      	push	{r4, r7}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80057fc:	1d3c      	adds	r4, r7, #4
 80057fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005804:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800581e:	4b23      	ldr	r3, [pc, #140]	; (80058ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b04      	cmp	r3, #4
 800582c:	d002      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x40>
 800582e:	2b08      	cmp	r3, #8
 8005830:	d003      	beq.n	800583a <HAL_RCC_GetSysClockFreq+0x46>
 8005832:	e02d      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005836:	623b      	str	r3, [r7, #32]
      break;
 8005838:	e02d      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	0c9b      	lsrs	r3, r3, #18
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005846:	4413      	add	r3, r2
 8005848:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800584c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0c5b      	lsrs	r3, r3, #17
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005866:	4413      	add	r3, r2
 8005868:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800586c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005872:	fb02 f203 	mul.w	r2, r2, r3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	e004      	b.n	800588a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	623b      	str	r3, [r7, #32]
      break;
 800588e:	e002      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005892:	623b      	str	r3, [r7, #32]
      break;
 8005894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005896:	6a3b      	ldr	r3, [r7, #32]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3728      	adds	r7, #40	; 0x28
 800589c:	46bd      	mov	sp, r7
 800589e:	bc90      	pop	{r4, r7}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	08006e58 	.word	0x08006e58
 80058a8:	08006e68 	.word	0x08006e68
 80058ac:	40021000 	.word	0x40021000
 80058b0:	007a1200 	.word	0x007a1200
 80058b4:	003d0900 	.word	0x003d0900

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	20000010 	.word	0x20000010

080058cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058d0:	f7ff fff2 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80058d4:	4601      	mov	r1, r0
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000
 80058f0:	08006e7c 	.word	0x08006e7c

080058f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058f8:	f7ff ffde 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80058fc:	4601      	mov	r1, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	0adb      	lsrs	r3, r3, #11
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4a03      	ldr	r2, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800590a:	5cd3      	ldrb	r3, [r2, r3]
 800590c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	08006e7c 	.word	0x08006e7c

0800591c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <RCC_Delay+0x34>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <RCC_Delay+0x38>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	0a5b      	lsrs	r3, r3, #9
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005938:	bf00      	nop
  }
  while (Delay --);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	60fa      	str	r2, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f9      	bne.n	8005938 <RCC_Delay+0x1c>
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000010 	.word	0x20000010
 8005954:	10624dd3 	.word	0x10624dd3

08005958 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d07d      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005974:	2300      	movs	r3, #0
 8005976:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005978:	4b4f      	ldr	r3, [pc, #316]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10d      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005984:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	4a4b      	ldr	r2, [pc, #300]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598e:	61d3      	str	r3, [r2, #28]
 8005990:	4b49      	ldr	r3, [pc, #292]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a0:	4b46      	ldr	r3, [pc, #280]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d118      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ac:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a42      	ldr	r2, [pc, #264]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b8:	f7fd f980 	bl	8002cbc <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	e008      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c0:	f7fd f97c 	bl	8002cbc <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e06d      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d2:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059de:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d02e      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d027      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fc:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a06:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a12:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a22:	f7fd f94b 	bl	8002cbc <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fd f947 	bl	8002cbc <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e036      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ee      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4917      	ldr	r1, [pc, #92]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d105      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	490b      	ldr	r1, [pc, #44]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4904      	ldr	r1, [pc, #16]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40007000 	.word	0x40007000
 8005ac0:	42420440 	.word	0x42420440

08005ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e041      	b.n	8005b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc ff60 	bl	80029b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fc1c 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e03a      	b.n	8005bf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <HAL_TIM_Base_Start_IT+0x98>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x58>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x58>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x58>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d111      	bne.n	8005be0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d010      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	e007      	b.n	8005bf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800

08005c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e041      	b.n	8005c9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f839 	bl	8005ca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 fb7a 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x24>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e022      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d109      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x3e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	e015      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d109      	bne.n	8005d10 <HAL_TIM_PWM_Start+0x58>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	bf14      	ite	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	2300      	moveq	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e05e      	b.n	8005de8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_PWM_Start+0x82>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d38:	e013      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIM_PWM_Start+0x92>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d48:	e00b      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_PWM_Start+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	e003      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2201      	movs	r2, #1
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fd68 	bl	8006840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <HAL_TIM_PWM_Start+0x138>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d107      	bne.n	8005d8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <HAL_TIM_PWM_Start+0x138>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIM_PWM_Start+0xfa>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_PWM_Start+0xfa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_TIM_PWM_Start+0x13c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIM_PWM_Start+0xfa>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <HAL_TIM_PWM_Start+0x140>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d111      	bne.n	8005dd6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d010      	beq.n	8005de6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	e007      	b.n	8005de6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800

08005dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0202 	mvn.w	r2, #2
 8005e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa62 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa55 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa64 	bl	800631a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0204 	mvn.w	r2, #4
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa38 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa2b 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fa3a 	bl	800631a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0208 	mvn.w	r2, #8
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa0e 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa01 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa10 	bl	800631a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0210 	mvn.w	r2, #16
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9e4 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9d7 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9e6 	bl	800631a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10e      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc f8a8 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d10e      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f98:	2b80      	cmp	r3, #128	; 0x80
 8005f9a:	d107      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fd26 	bl	80069f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d107      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9aa 	bl	800632c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d10e      	bne.n	8006004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d107      	bne.n	8006004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0220 	mvn.w	r2, #32
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fcf1 	bl	80069e6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006022:	2302      	movs	r3, #2
 8006024:	e0ac      	b.n	8006180 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b0c      	cmp	r3, #12
 8006032:	f200 809f 	bhi.w	8006174 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006071 	.word	0x08006071
 8006040:	08006175 	.word	0x08006175
 8006044:	08006175 	.word	0x08006175
 8006048:	08006175 	.word	0x08006175
 800604c:	080060b1 	.word	0x080060b1
 8006050:	08006175 	.word	0x08006175
 8006054:	08006175 	.word	0x08006175
 8006058:	08006175 	.word	0x08006175
 800605c:	080060f3 	.word	0x080060f3
 8006060:	08006175 	.word	0x08006175
 8006064:	08006175 	.word	0x08006175
 8006068:	08006175 	.word	0x08006175
 800606c:	08006133 	.word	0x08006133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f9c4 	bl	8006404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6999      	ldr	r1, [r3, #24]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	619a      	str	r2, [r3, #24]
      break;
 80060ae:	e062      	b.n	8006176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fa0a 	bl	80064d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6999      	ldr	r1, [r3, #24]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	619a      	str	r2, [r3, #24]
      break;
 80060f0:	e041      	b.n	8006176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fa53 	bl	80065a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0208 	orr.w	r2, r2, #8
 800610c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0204 	bic.w	r2, r2, #4
 800611c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69d9      	ldr	r1, [r3, #28]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	61da      	str	r2, [r3, #28]
      break;
 8006130:	e021      	b.n	8006176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fa9d 	bl	8006678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69d9      	ldr	r1, [r3, #28]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	021a      	lsls	r2, r3, #8
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	61da      	str	r2, [r3, #28]
      break;
 8006172:	e000      	b.n	8006176 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_TIM_ConfigClockSource+0x18>
 800619c:	2302      	movs	r3, #2
 800619e:	e0a6      	b.n	80062ee <HAL_TIM_ConfigClockSource+0x166>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d067      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x120>
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d80b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x6c>
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d073      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x140>
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d802      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x62>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d06f      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061e8:	e078      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d06c      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x140>
 80061ee:	2b30      	cmp	r3, #48	; 0x30
 80061f0:	d06a      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061f2:	e073      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061f4:	2b70      	cmp	r3, #112	; 0x70
 80061f6:	d00d      	beq.n	8006214 <HAL_TIM_ConfigClockSource+0x8c>
 80061f8:	2b70      	cmp	r3, #112	; 0x70
 80061fa:	d804      	bhi.n	8006206 <HAL_TIM_ConfigClockSource+0x7e>
 80061fc:	2b50      	cmp	r3, #80	; 0x50
 80061fe:	d033      	beq.n	8006268 <HAL_TIM_ConfigClockSource+0xe0>
 8006200:	2b60      	cmp	r3, #96	; 0x60
 8006202:	d041      	beq.n	8006288 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006204:	e06a      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	d066      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x152>
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006210:	d017      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006212:	e063      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f000 faed 	bl	8006802 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006236:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
      break;
 8006240:	e04c      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6899      	ldr	r1, [r3, #8]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f000 fad6 	bl	8006802 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006264:	609a      	str	r2, [r3, #8]
      break;
 8006266:	e039      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6859      	ldr	r1, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	461a      	mov	r2, r3
 8006276:	f000 fa4d 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2150      	movs	r1, #80	; 0x50
 8006280:	4618      	mov	r0, r3
 8006282:	f000 faa4 	bl	80067ce <TIM_ITRx_SetConfig>
      break;
 8006286:	e029      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	461a      	mov	r2, r3
 8006296:	f000 fa6b 	bl	8006770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2160      	movs	r1, #96	; 0x60
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fa94 	bl	80067ce <TIM_ITRx_SetConfig>
      break;
 80062a6:	e019      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6859      	ldr	r1, [r3, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f000 fa2d 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2140      	movs	r1, #64	; 0x40
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fa84 	bl	80067ce <TIM_ITRx_SetConfig>
      break;
 80062c6:	e009      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f000 fa7b 	bl	80067ce <TIM_ITRx_SetConfig>
        break;
 80062d8:	e000      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr
	...

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <TIM_Base_SetConfig+0xb8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00b      	beq.n	8006370 <TIM_Base_SetConfig+0x30>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d007      	beq.n	8006370 <TIM_Base_SetConfig+0x30>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a26      	ldr	r2, [pc, #152]	; (80063fc <TIM_Base_SetConfig+0xbc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0x30>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a25      	ldr	r2, [pc, #148]	; (8006400 <TIM_Base_SetConfig+0xc0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d108      	bne.n	8006382 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <TIM_Base_SetConfig+0xb8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0x62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0x62>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <TIM_Base_SetConfig+0xbc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x62>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <TIM_Base_SetConfig+0xc0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <TIM_Base_SetConfig+0xb8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d103      	bne.n	80063e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	615a      	str	r2, [r3, #20]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800

08006404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	f023 0201 	bic.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 0302 	bic.w	r3, r3, #2
 800644c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1c      	ldr	r2, [pc, #112]	; (80064cc <TIM_OC1_SetConfig+0xc8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10c      	bne.n	800647a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0308 	bic.w	r3, r3, #8
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a13      	ldr	r2, [pc, #76]	; (80064cc <TIM_OC1_SetConfig+0xc8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d111      	bne.n	80064a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	621a      	str	r2, [r3, #32]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00

080064d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0210 	bic.w	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0320 	bic.w	r3, r3, #32
 800651a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <TIM_OC2_SetConfig+0xd0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10d      	bne.n	800654c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a14      	ldr	r2, [pc, #80]	; (80065a0 <TIM_OC2_SetConfig+0xd0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d113      	bne.n	800657c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	40012c00 	.word	0x40012c00

080065a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <TIM_OC3_SetConfig+0xd0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10d      	bne.n	800661e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a14      	ldr	r2, [pc, #80]	; (8006674 <TIM_OC3_SetConfig+0xd0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d113      	bne.n	800664e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	621a      	str	r2, [r3, #32]
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00

08006678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <TIM_OC4_SetConfig+0x98>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d109      	bne.n	80066ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	019b      	lsls	r3, r3, #6
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00

08006714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 030a 	bic.w	r3, r3, #10
 8006750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f023 0210 	bic.w	r2, r3, #16
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f043 0307 	orr.w	r3, r3, #7
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	609a      	str	r2, [r3, #8]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800681c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	021a      	lsls	r2, r3, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	431a      	orrs	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	609a      	str	r2, [r3, #8]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2201      	movs	r2, #1
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1a      	ldr	r2, [r3, #32]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	fa01 f303 	lsl.w	r3, r1, r3
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e046      	b.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a16      	ldr	r2, [pc, #88]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d009      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a12      	ldr	r2, [pc, #72]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a10      	ldr	r2, [pc, #64]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10c      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40000400 	.word	0x40000400
 8006940:	40000800 	.word	0x40000800

08006944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800695c:	2302      	movs	r3, #2
 800695e:	e03d      	b.n	80069dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr

080069e6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e03f      	b.n	8006a9c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fc f82b 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2224      	movs	r2, #36	; 0x24
 8006a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f828 	bl	8006aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ade:	f023 030c 	bic.w	r3, r3, #12
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <UART_SetConfig+0x114>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d103      	bne.n	8006b14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe fef2 	bl	80058f4 <HAL_RCC_GetPCLK2Freq>
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	e002      	b.n	8006b1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b14:	f7fe feda 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 8006b18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009a      	lsls	r2, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <UART_SetConfig+0x118>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	0119      	lsls	r1, r3, #4
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009a      	lsls	r2, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <UART_SetConfig+0x118>)
 8006b52:	fba3 0302 	umull	r0, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	2064      	movs	r0, #100	; 0x64
 8006b5a:	fb00 f303 	mul.w	r3, r0, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <UART_SetConfig+0x118>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b70:	4419      	add	r1, r3
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009a      	lsls	r2, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <UART_SetConfig+0x118>)
 8006b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2064      	movs	r0, #100	; 0x64
 8006b92:	fb00 f303 	mul.w	r3, r0, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	3332      	adds	r3, #50	; 0x32
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <UART_SetConfig+0x118>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	440a      	add	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40013800 	.word	0x40013800
 8006bbc:	51eb851f 	.word	0x51eb851f

08006bc0 <__errno>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	; (8006bc8 <__errno+0x8>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	2000001c 	.word	0x2000001c

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	2500      	movs	r5, #0
 8006bd0:	4e0c      	ldr	r6, [pc, #48]	; (8006c04 <__libc_init_array+0x38>)
 8006bd2:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd4:	1ba4      	subs	r4, r4, r6
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	42a5      	cmp	r5, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	f000 f924 	bl	8006e28 <_init>
 8006be0:	2500      	movs	r5, #0
 8006be2:	4e0a      	ldr	r6, [pc, #40]	; (8006c0c <__libc_init_array+0x40>)
 8006be4:	4c0a      	ldr	r4, [pc, #40]	; (8006c10 <__libc_init_array+0x44>)
 8006be6:	1ba4      	subs	r4, r4, r6
 8006be8:	10a4      	asrs	r4, r4, #2
 8006bea:	42a5      	cmp	r5, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bf4:	4798      	blx	r3
 8006bf6:	3501      	adds	r5, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bfe:	4798      	blx	r3
 8006c00:	3501      	adds	r5, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08006e8c 	.word	0x08006e8c
 8006c08:	08006e8c 	.word	0x08006e8c
 8006c0c:	08006e8c 	.word	0x08006e8c
 8006c10:	08006e90 	.word	0x08006e90

08006c14 <memset>:
 8006c14:	4603      	mov	r3, r0
 8006c16:	4402      	add	r2, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <sqrt>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	b08b      	sub	sp, #44	; 0x2c
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	f000 f84d 	bl	8006ccc <__ieee754_sqrt>
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <sqrt+0xa0>)
 8006c34:	4680      	mov	r8, r0
 8006c36:	f993 a000 	ldrsb.w	sl, [r3]
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c40:	d02b      	beq.n	8006c9a <sqrt+0x76>
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fed7 	bl	80009fc <__aeabi_dcmpun>
 8006c4e:	4683      	mov	fp, r0
 8006c50:	bb18      	cbnz	r0, 8006c9a <sqrt+0x76>
 8006c52:	2600      	movs	r6, #0
 8006c54:	2700      	movs	r7, #0
 8006c56:	4632      	mov	r2, r6
 8006c58:	463b      	mov	r3, r7
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fea5 	bl	80009ac <__aeabi_dcmplt>
 8006c62:	b1d0      	cbz	r0, 8006c9a <sqrt+0x76>
 8006c64:	2301      	movs	r3, #1
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <sqrt+0xa4>)
 8006c6a:	f8cd b020 	str.w	fp, [sp, #32]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006c74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c78:	f1ba 0f00 	cmp.w	sl, #0
 8006c7c:	d112      	bne.n	8006ca4 <sqrt+0x80>
 8006c7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006c82:	4668      	mov	r0, sp
 8006c84:	f000 f8ce 	bl	8006e24 <matherr>
 8006c88:	b1b8      	cbz	r0, 8006cba <sqrt+0x96>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	b11b      	cbz	r3, 8006c96 <sqrt+0x72>
 8006c8e:	f7ff ff97 	bl	8006bc0 <__errno>
 8006c92:	9b08      	ldr	r3, [sp, #32]
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	b00b      	add	sp, #44	; 0x2c
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 fd36 	bl	800071c <__aeabi_ddiv>
 8006cb0:	f1ba 0f02 	cmp.w	sl, #2
 8006cb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cb8:	d1e3      	bne.n	8006c82 <sqrt+0x5e>
 8006cba:	f7ff ff81 	bl	8006bc0 <__errno>
 8006cbe:	2321      	movs	r3, #33	; 0x21
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	e7e2      	b.n	8006c8a <sqrt+0x66>
 8006cc4:	20000080 	.word	0x20000080
 8006cc8:	08006e84 	.word	0x08006e84

08006ccc <__ieee754_sqrt>:
 8006ccc:	4b54      	ldr	r3, [pc, #336]	; (8006e20 <__ieee754_sqrt+0x154>)
 8006cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	438b      	bics	r3, r1
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	460a      	mov	r2, r1
 8006cda:	460c      	mov	r4, r1
 8006cdc:	d10f      	bne.n	8006cfe <__ieee754_sqrt+0x32>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	f7f9 fbf1 	bl	80004c8 <__aeabi_dmul>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4630      	mov	r0, r6
 8006cec:	4629      	mov	r1, r5
 8006cee:	f7f9 fa35 	bl	800015c <__adddf3>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	4607      	mov	r7, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	dc0e      	bgt.n	8006d24 <__ieee754_sqrt+0x58>
 8006d06:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006d0a:	ea5c 0707 	orrs.w	r7, ip, r7
 8006d0e:	d0f2      	beq.n	8006cf6 <__ieee754_sqrt+0x2a>
 8006d10:	b141      	cbz	r1, 8006d24 <__ieee754_sqrt+0x58>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	f7f9 fa1f 	bl	8000158 <__aeabi_dsub>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	f7f9 fcfd 	bl	800071c <__aeabi_ddiv>
 8006d22:	e7e6      	b.n	8006cf2 <__ieee754_sqrt+0x26>
 8006d24:	1512      	asrs	r2, r2, #20
 8006d26:	d074      	beq.n	8006e12 <__ieee754_sqrt+0x146>
 8006d28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006d2c:	07d5      	lsls	r5, r2, #31
 8006d2e:	f04f 0500 	mov.w	r5, #0
 8006d32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d36:	bf48      	it	mi
 8006d38:	0fd9      	lsrmi	r1, r3, #31
 8006d3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006d3e:	bf44      	itt	mi
 8006d40:	005b      	lslmi	r3, r3, #1
 8006d42:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006d46:	1051      	asrs	r1, r2, #1
 8006d48:	0fda      	lsrs	r2, r3, #31
 8006d4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006d4e:	4628      	mov	r0, r5
 8006d50:	2216      	movs	r2, #22
 8006d52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	1987      	adds	r7, r0, r6
 8006d5a:	42a7      	cmp	r7, r4
 8006d5c:	bfde      	ittt	le
 8006d5e:	19b8      	addle	r0, r7, r6
 8006d60:	1be4      	suble	r4, r4, r7
 8006d62:	19ad      	addle	r5, r5, r6
 8006d64:	0fdf      	lsrs	r7, r3, #31
 8006d66:	3a01      	subs	r2, #1
 8006d68:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d74:	d1f0      	bne.n	8006d58 <__ieee754_sqrt+0x8c>
 8006d76:	f04f 0c20 	mov.w	ip, #32
 8006d7a:	4696      	mov	lr, r2
 8006d7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d80:	4284      	cmp	r4, r0
 8006d82:	eb06 070e 	add.w	r7, r6, lr
 8006d86:	dc02      	bgt.n	8006d8e <__ieee754_sqrt+0xc2>
 8006d88:	d112      	bne.n	8006db0 <__ieee754_sqrt+0xe4>
 8006d8a:	429f      	cmp	r7, r3
 8006d8c:	d810      	bhi.n	8006db0 <__ieee754_sqrt+0xe4>
 8006d8e:	2f00      	cmp	r7, #0
 8006d90:	eb07 0e06 	add.w	lr, r7, r6
 8006d94:	da42      	bge.n	8006e1c <__ieee754_sqrt+0x150>
 8006d96:	f1be 0f00 	cmp.w	lr, #0
 8006d9a:	db3f      	blt.n	8006e1c <__ieee754_sqrt+0x150>
 8006d9c:	f100 0801 	add.w	r8, r0, #1
 8006da0:	1a24      	subs	r4, r4, r0
 8006da2:	4640      	mov	r0, r8
 8006da4:	429f      	cmp	r7, r3
 8006da6:	bf88      	it	hi
 8006da8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006dac:	1bdb      	subs	r3, r3, r7
 8006dae:	4432      	add	r2, r6
 8006db0:	0064      	lsls	r4, r4, #1
 8006db2:	f1bc 0c01 	subs.w	ip, ip, #1
 8006db6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006dba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006dbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006dc2:	d1dd      	bne.n	8006d80 <__ieee754_sqrt+0xb4>
 8006dc4:	4323      	orrs	r3, r4
 8006dc6:	d006      	beq.n	8006dd6 <__ieee754_sqrt+0x10a>
 8006dc8:	1c54      	adds	r4, r2, #1
 8006dca:	bf0b      	itete	eq
 8006dcc:	4662      	moveq	r2, ip
 8006dce:	3201      	addne	r2, #1
 8006dd0:	3501      	addeq	r5, #1
 8006dd2:	f022 0201 	bicne.w	r2, r2, #1
 8006dd6:	106b      	asrs	r3, r5, #1
 8006dd8:	0852      	lsrs	r2, r2, #1
 8006dda:	07e8      	lsls	r0, r5, #31
 8006ddc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006de0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006de4:	bf48      	it	mi
 8006de6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006dea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006dee:	4616      	mov	r6, r2
 8006df0:	e781      	b.n	8006cf6 <__ieee754_sqrt+0x2a>
 8006df2:	0adc      	lsrs	r4, r3, #11
 8006df4:	3915      	subs	r1, #21
 8006df6:	055b      	lsls	r3, r3, #21
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	d0fa      	beq.n	8006df2 <__ieee754_sqrt+0x126>
 8006dfc:	02e6      	lsls	r6, r4, #11
 8006dfe:	d50a      	bpl.n	8006e16 <__ieee754_sqrt+0x14a>
 8006e00:	f1c2 0020 	rsb	r0, r2, #32
 8006e04:	fa23 f000 	lsr.w	r0, r3, r0
 8006e08:	1e55      	subs	r5, r2, #1
 8006e0a:	4093      	lsls	r3, r2
 8006e0c:	4304      	orrs	r4, r0
 8006e0e:	1b4a      	subs	r2, r1, r5
 8006e10:	e78a      	b.n	8006d28 <__ieee754_sqrt+0x5c>
 8006e12:	4611      	mov	r1, r2
 8006e14:	e7f0      	b.n	8006df8 <__ieee754_sqrt+0x12c>
 8006e16:	0064      	lsls	r4, r4, #1
 8006e18:	3201      	adds	r2, #1
 8006e1a:	e7ef      	b.n	8006dfc <__ieee754_sqrt+0x130>
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	e7bf      	b.n	8006da0 <__ieee754_sqrt+0xd4>
 8006e20:	7ff00000 	.word	0x7ff00000

08006e24 <matherr>:
 8006e24:	2000      	movs	r0, #0
 8006e26:	4770      	bx	lr

08006e28 <_init>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr

08006e34 <_fini>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr
